package com.classroomapp.classroombackend.config;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.classroomapp.classroombackend.constants.RoleConstants;
import com.classroomapp.classroombackend.dto.StudentRequestFormDTO;
import com.classroomapp.classroombackend.dto.TeacherRequestFormDTO;
import com.classroomapp.classroombackend.model.Accomplishment;
import com.classroomapp.classroombackend.model.Announcement;
import com.classroomapp.classroombackend.model.AnnouncementAttachment;
import com.classroomapp.classroombackend.model.Blog;
import com.classroomapp.classroombackend.model.Request;
import com.classroomapp.classroombackend.model.assignmentmanagement.Assignment;
import com.classroomapp.classroombackend.model.assignmentmanagement.Submission;
import com.classroomapp.classroombackend.model.attendancemanagement.Attendance;
import com.classroomapp.classroombackend.model.attendancemanagement.AttendanceSession;
import com.classroomapp.classroombackend.model.classroommanagement.Classroom;
import com.classroomapp.classroombackend.model.classroommanagement.ClassroomEnrollment;
import com.classroomapp.classroombackend.model.classroommanagement.ClassroomEnrollmentId;
import com.classroomapp.classroombackend.model.classroommanagement.Schedule;
import com.classroomapp.classroombackend.model.classroommanagement.Syllabus;
import com.classroomapp.classroombackend.model.usermanagement.User;
import com.classroomapp.classroombackend.repository.AccomplishmentRepository;
import com.classroomapp.classroombackend.repository.AnnouncementAttachmentRepository;
import com.classroomapp.classroombackend.repository.AnnouncementRepository;
import com.classroomapp.classroombackend.repository.BlogRepository;
import com.classroomapp.classroombackend.repository.requestmanagement.RequestRepository;
import com.classroomapp.classroombackend.repository.assignmentmanagement.AssignmentRepository;
import com.classroomapp.classroombackend.repository.assignmentmanagement.SubmissionRepository;
import com.classroomapp.classroombackend.repository.attendancemanagement.AttendanceRepository;
import com.classroomapp.classroombackend.repository.attendancemanagement.AttendanceSessionRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ScheduleRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.SyllabusRepository;
import com.classroomapp.classroombackend.repository.usermanagement.UserRepository;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Initialize test data when application starts
 */
@Component
public class DataLoader implements CommandLineRunner {

    private final UserRepository userRepository;
    private final BlogRepository blogRepository;
    private final RequestRepository requestRepository;
    private final AccomplishmentRepository accomplishmentRepository;
    private final ClassroomRepository classroomRepository;
    private final AssignmentRepository assignmentRepository;
    private final SubmissionRepository submissionRepository;
    private final AttendanceSessionRepository attendanceSessionRepository;
    private final AttendanceRepository attendanceRepository;
    private final AnnouncementRepository announcementRepository;
    private final AnnouncementAttachmentRepository announcementAttachmentRepository;
    private final ScheduleRepository scheduleRepository;
    private final SyllabusRepository syllabusRepository;
    private final PasswordEncoder passwordEncoder;
    private final ObjectMapper objectMapper;
    
    @Autowired
    public DataLoader(
        UserRepository userRepository,
        BlogRepository blogRepository,
        RequestRepository requestRepository,
        AccomplishmentRepository accomplishmentRepository,
        ClassroomRepository classroomRepository,
        AssignmentRepository assignmentRepository,
        SubmissionRepository submissionRepository,
        AttendanceSessionRepository attendanceSessionRepository,
        AttendanceRepository attendanceRepository,
        AnnouncementRepository announcementRepository,
        AnnouncementAttachmentRepository announcementAttachmentRepository,
        ScheduleRepository scheduleRepository,
        SyllabusRepository syllabusRepository,
        PasswordEncoder passwordEncoder,
        ObjectMapper objectMapper
    ) {
        this.userRepository = userRepository;
        this.blogRepository = blogRepository;
        this.requestRepository = requestRepository;
        this.accomplishmentRepository = accomplishmentRepository;
        this.classroomRepository = classroomRepository;
        this.assignmentRepository = assignmentRepository;
        this.submissionRepository = submissionRepository;
        this.attendanceSessionRepository = attendanceSessionRepository;
        this.attendanceRepository = attendanceRepository;
        this.announcementRepository = announcementRepository;
        this.announcementAttachmentRepository = announcementAttachmentRepository;
        this.scheduleRepository = scheduleRepository;
        this.syllabusRepository = syllabusRepository;
        this.passwordEncoder = passwordEncoder;
        this.objectMapper = objectMapper;
    }
    
    @Override
    public void run(String... args) throws Exception {
        // Always clear existing data and reload fresh data
        clearAllData();
        
        // Create sample users
        List<User> users = CreateUsers();
        
        // Create sample blogs
        CreateSampleBlogs(users);
        
        // Create sample accomplishments
        CreateAccomplishments();
        
        // Create sample requests
        CreateRequests();

        // Create sample classrooms and enrollments
        CreateClassrooms(users);

        // Create sample assignments and submissions
        CreateAssignments(users);

        // Create sample attendance records
        CreateAttendance(users);

        // Create sample announcements
        CreateAnnouncements(users);
        
        System.out.println("‚úÖ DataLoader: All data has been reset and reloaded successfully!");
    }
    
    /**
     * Clear all existing data from database
     */
    private void clearAllData() {
        System.out.println("üóëÔ∏è DataLoader: Clearing all existing data...");
        
        // Clear data in reverse order of dependencies to avoid foreign key constraints
        announcementAttachmentRepository.deleteAll();
        attendanceRepository.deleteAll();
        attendanceSessionRepository.deleteAll();
        submissionRepository.deleteAll();
        assignmentRepository.deleteAll();
        announcementRepository.deleteAll();
        accomplishmentRepository.deleteAll();
        requestRepository.deleteAll();
        blogRepository.deleteAll();
        classroomRepository.deleteAll();
        userRepository.deleteAll();
        
        System.out.println("‚úÖ DataLoader: All existing data cleared successfully!");
    }
    
    /**
     * Create sample users for testing
     * @return List of created users
     */
    private List<User> CreateUsers() {
        // Create admin user
        User admin = new User();
        admin.setUsername("admin");
        admin.setPassword(passwordEncoder.encode("admin123"));
        admin.setEmail("admin@classroomapp.com");
        admin.setFullName("Administrator");
        admin.setRoleId(RoleConstants.ADMIN);
        userRepository.save(admin);        
        // Create manager user
        User manager = new User();
        manager.setUsername("manager");
        manager.setPassword(passwordEncoder.encode("manager123"));
        manager.setEmail("fonkunn@gmail.com");
        manager.setFullName("Manager User");
        manager.setRoleId(RoleConstants.MANAGER);
        userRepository.save(manager);

        // Create teacher user
        User teacher = new User();
        teacher.setUsername("teacher");
        teacher.setPassword(passwordEncoder.encode("teacher123"));  
        teacher.setEmail("teacher@classroomapp.com");
        teacher.setFullName("Teacher User");
        teacher.setRoleId(RoleConstants.TEACHER);
        userRepository.save(teacher);
        
        // Create student user
        User student = new User();
        student.setUsername("student");
        student.setPassword(passwordEncoder.encode("student123"));
        student.setEmail("student@classroomapp.com");
        student.setFullName("Student User");
        student.setRoleId(RoleConstants.STUDENT);
        userRepository.save(student);
        
        return Arrays.asList(admin, manager, teacher, student);
    }
    
    /**
     * Create sample blogs for testing
     * @param users List of users for assigning authors
     */
    private void CreateSampleBlogs(List<User> users) {
        User admin = users.get(0);
        User manager = users.get(1);
        User teacher = users.get(2);
        
        // Blog 1 - Published by Admin
        Blog blog1 = new Blog();
        blog1.setTitle("Ch√†o m·ª´ng ƒë·∫øn v·ªõi N·ªÅn t·∫£ng L·ªõp h·ªçc c·ªßa Ch√∫ng t√¥i");
        blog1.setDescription("ƒê√¢y l√† b√†i vi·∫øt blog ƒë·∫ßu ti√™n tr√™n n·ªÅn t·∫£ng l·ªõp h·ªçc c·ªßa ch√∫ng t√¥i. Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o v·ªÅ vi·ªác ra m·∫Øt m√¥i tr∆∞·ªùng h·ªçc t·∫≠p k·ªπ thu·∫≠t s·ªë m·ªõi ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t·∫°o ƒëi·ªÅu ki·ªán giao ti·∫øp t·ªët h∆°n gi·ªØa gi√°o vi√™n v√† h·ªçc sinh.\n\nN·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i bao g·ªìm c√°c t√≠nh nƒÉng nh∆∞:\n- L·ªõp h·ªçc ·∫£o\n- N·ªôp b√†i t·∫≠p\n- H·ªá th·ªëng ch·∫•m ƒëi·ªÉm\n- Di·ªÖn ƒë√†n th·∫£o lu·∫≠n\n\nCh√∫ng t√¥i hy v·ªçng b·∫°n s·∫Ω th√≠ch s·ª≠ d·ª•ng n·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i!");
        blog1.setImageUrl("https://images.unsplash.com/photo-1503676260728-1c00da094a0b?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80");
        blog1.setThumbnailUrl("https://images.unsplash.com/photo-1503676260728-1c00da094a0b?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60");
        blog1.setTags("th√¥ng b√°o, ch√†o m·ª´ng, n·ªÅn t·∫£ng");
        blog1.setAuthor(admin);
        blog1.setIsPublished(true);
        blog1.setStatus("published");
        LocalDateTime now = LocalDateTime.now();
        blog1.setPublishedDate(now.minusDays(7));
        blog1.setLastEditedDate(now.minusDays(7));
        blog1.setLastEditedBy(admin);
        blog1.setViewCount(156);
        blogRepository.save(blog1);
        
        // Blog 2 - Published by Teacher
        Blog blog2 = new Blog();
        blog2.setTitle("M·∫πo H·ªçc Tr·ª±c Tuy·∫øn Hi·ªáu Qu·∫£");
        blog2.setDescription("Khi ch√∫ng ta chuy·ªÉn sang h·ªçc tr·ª±c tuy·∫øn nhi·ªÅu h∆°n, ƒë√¢y l√† m·ªôt s·ªë m·∫πo ƒë·ªÉ gi√∫p h·ªçc sinh th√†nh c√¥ng:\n\n1. **T·∫°o kh√¥ng gian h·ªçc t·∫≠p ri√™ng** - T√¨m m·ªôt n∆°i y√™n tƒ©nh, tho·∫£i m√°i n∆°i b·∫°n c√≥ th·ªÉ t·∫≠p trung.\n\n2. **Thi·∫øt l·∫≠p th√≥i quen** - ƒê·∫∑t gi·ªù h·ªçc c·ªë ƒë·ªãnh v√† tu√¢n th·ªß ch√∫ng.\n\n3. **Ngh·ªâ gi·∫£i lao** - S·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t nh∆∞ ph∆∞∆°ng ph√°p Pomodoro (25 ph√∫t l√†m vi·ªác sau ƒë√≥ ngh·ªâ 5 ph√∫t).\n\n4. **Gi·ªØ t·ªï ch·ª©c** - S·ª≠ d·ª•ng l·ªãch k·ªπ thu·∫≠t s·ªë v√† danh s√°ch vi·ªác c·∫ßn l√†m ƒë·ªÉ theo d√µi b√†i t·∫≠p v√† th·ªùi h·∫°n.\n\n5. **Tham gia t√≠ch c·ª±c** - Tham gia v√†o c√°c cu·ªôc th·∫£o lu·∫≠n tr·ª±c tuy·∫øn v√† ƒë·∫∑t c√¢u h·ªèi khi c·∫ßn gi√∫p ƒë·ª°.\n\nB·∫°n th·∫•y chi·∫øn l∆∞·ª£c n√†o hi·ªáu qu·∫£ nh·∫•t cho vi·ªác h·ªçc tr·ª±c tuy·∫øn? H√£y chia s·∫ª trong ph·∫ßn b√¨nh lu·∫≠n!");
        blog2.setImageUrl("https://images.unsplash.com/photo-1498243691581-b145c3f54a5a?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80");
        blog2.setThumbnailUrl("https://images.unsplash.com/photo-1498243691581-b145c3f54a5a?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60");
        blog2.setVideoUrl("https://www.youtube.com/embed/sBJmRD7kNTk");
        blog2.setTags("h·ªçc tr·ª±c tuy·∫øn, m·∫πo h·ªçc t·∫≠p, gi√°o d·ª•c");
        blog2.setAuthor(teacher);
        blog2.setIsPublished(true);
        blog2.setStatus("published");
        blog2.setPublishedDate(now.minusDays(5));
        blog2.setLastEditedDate(now.minusDays(5));
        blog2.setLastEditedBy(teacher);
        blog2.setViewCount(89);
        blogRepository.save(blog2);
        
        // Blog 3 - Draft by Manager
        Blog blog3 = new Blog();
        blog3.setTitle("T√≠nh NƒÉng M·ªõi S·∫Øp Ra M·∫Øt Cho H·ªçc K·ª≥ T·ªõi");
        blog3.setDescription("Ch√∫ng t√¥i ƒëang l√†m vi·ªác tr√™n m·ªôt s·ªë t√≠nh nƒÉng th√∫ v·ªã s·∫Ω ƒë∆∞·ª£c ph√°t h√†nh trong h·ªçc k·ª≥ t·ªõi. Nh·ªØng c·∫£i ti·∫øn n√†y d·ª±a tr√™n ph·∫£n h·ªìi t·ª´ h·ªçc sinh v√† gi√°o vi√™n.\n\n**S·∫Øp Ra M·∫Øt:**\n\n- H·ªá th·ªëng tin nh·∫Øn c·∫£i ti·∫øn\n- C√¥ng c·ª• c·ªông t√°c th·ªùi gian th·ª±c\n- ·ª®ng d·ª•ng di ƒë·ªông cho iOS v√† Android\n- T√≠ch h·ª£p v·ªõi c√°c c√¥ng c·ª• gi√°o d·ª•c ph·ªï bi·∫øn\n- Ph√¢n t√≠ch n√¢ng cao cho gi√°o vi√™n\n\nB√†i vi·∫øt n√†y v·∫´n ƒëang l√† b·∫£n nh√°p v√† s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi nhi·ªÅu chi ti·∫øt h∆°n tr∆∞·ªõc khi xu·∫•t b·∫£n.");
        blog3.setThumbnailUrl("https://i1.sndcdn.com/artworks-000473680527-kz21lf-t1080x1080.jpg");
        blog3.setTags("t√≠nh nƒÉng, s·∫Øp ra m·∫Øt, c·∫£i ti·∫øn");
        blog3.setAuthor(manager);
        blog3.setIsPublished(false);
        blog3.setStatus("draft");
        blog3.setLastEditedDate(now.minusDays(2));
        blog3.setLastEditedBy(manager);
        blogRepository.save(blog3);
        
        // Blog 4 - Published by Manager with image and video
        Blog blog4 = new Blog();
        blog4.setTitle("Chuy·∫øn Tham Quan ·∫¢o: Kh√°m Ph√° C√°c B·∫£o T√†ng Th·∫ø Gi·ªõi");
        blog4.setDescription("H√¥m nay ch√∫ng ta s·∫Ω th·ª±c hi·ªán m·ªôt chuy·∫øn tham quan ·∫£o ƒë·∫øn m·ªôt s·ªë b·∫£o t√†ng n·ªïi ti·∫øng nh·∫•t th·∫ø gi·ªõi cung c·∫•p c√°c tour tr·ª±c tuy·∫øn.\n\nNhi·ªÅu b·∫£o t√†ng uy t√≠n cung c·∫•p c√°c tour ·∫£o cho ph√©p b·∫°n kh√°m ph√° b·ªô s∆∞u t·∫≠p c·ªßa h·ªç t·ª´ s·ª± tho·∫£i m√°i c·ªßa ng√¥i nh√†. ƒê√¢y l√† m·ªôt ngu·ªìn t√†i nguy√™n gi√°o d·ª•c tuy·ªát v·ªùi cho ngh·ªá thu·∫≠t, l·ªãch s·ª≠ v√† nghi√™n c·ª©u vƒÉn h√≥a.\n\n**C√°c b·∫£o t√†ng ƒë∆∞·ª£c gi·ªõi thi·ªáu trong video:**\n\n- B·∫£o t√†ng Louvre, Paris\n- B·∫£o t√†ng Anh, London\n- B·∫£o t√†ng Ngh·ªá thu·∫≠t Metropolitan, New York\n- B·∫£o t√†ng Vatican, Rome\n- B·∫£o t√†ng Ngh·ªá thu·∫≠t Hi·ªán ƒë·∫°i v√† ƒê∆∞∆°ng ƒë·∫°i Qu·ªëc gia, Seoul\n\nVideo ƒë√≠nh k√®m cung c·∫•p m·ªôt tour c√≥ h∆∞·ªõng d·∫´n c·ªßa c√°c b·∫£o t√†ng n√†y. Ch√∫ng t√¥i hy v·ªçng chuy·∫øn tham quan ·∫£o n√†y s·∫Ω truy·ªÅn c·∫£m h·ª©ng cho h·ªçc sinh t√¨m hi·ªÉu th√™m v·ªÅ ngh·ªá thu·∫≠t v√† l·ªãch s·ª≠!");
        blog4.setImageUrl("https://images.unsplash.com/photo-1515169273894-7e876dcf13da?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80");
        blog4.setThumbnailUrl("https://images.unsplash.com/photo-1515169273894-7e876dcf13da?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60");
        blog4.setVideoUrl("https://www.youtube.com/embed/vQ_sAt-VzRk");
        blog4.setTags("tham quan ·∫£o, b·∫£o t√†ng, ngh·ªá thu·∫≠t, l·ªãch s·ª≠, gi√°o d·ª•c");
        blog4.setAuthor(manager);
        blog4.setIsPublished(true);
        blog4.setStatus("published");
        blog4.setPublishedDate(now.minusDays(1));
        blog4.setLastEditedDate(now.minusDays(1));
        blog4.setLastEditedBy(manager);
        blog4.setViewCount(42);
        blogRepository.save(blog4);
        
        // Blog 5 - Published by Student (if they can create blogs)
        Blog blog5 = new Blog();
        blog5.setTitle("H√†nh Tr√¨nh H·ªçc T·∫≠p C·ªßa T√¥i: T·ª´ Ng∆∞·ªùi M·ªõi B·∫Øt ƒê·∫ßu ƒê·∫øn N√¢ng Cao");
        blog5.setDescription("Xin ch√†o m·ªçi ng∆∞·ªùi! T√¥i mu·ªën chia s·∫ª h√†nh tr√¨nh h·ªçc t·∫≠p c√° nh√¢n c·ªßa m√¨nh v√† m·ªôt s·ªë hi·ªÉu bi·∫øt c√≥ th·ªÉ gi√∫p √≠ch cho c√°c h·ªçc sinh kh√°c.\n\n**Tr·∫£i Nghi·ªám C·ªßa T√¥i:**\n\nKhi t√¥i l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng n·ªÅn t·∫£ng n√†y, t√¥i c·∫£m th·∫•y cho√°ng ng·ª£p b·ªüi t·∫•t c·∫£ c√°c t√≠nh nƒÉng. Nh∆∞ng d·∫ßn d·∫ßn, t√¥i kh√°m ph√° ra c√°ch m·ªói c√¥ng c·ª• c√≥ th·ªÉ gi√∫p t√¥i h·ªçc t·ªët h∆°n.\n\n**Nh·ªØng B√†i H·ªçc Ch√≠nh:**\n\n1. **T√≠nh nh·∫•t qu√°n l√† ch√¨a kh√≥a** - H·ªçc m·ªôt ch√∫t m·ªói ng√†y t·ªët h∆°n l√† nh·ªìi nh√©t\n2. **ƒê·∫∑t c√¢u h·ªèi** - ƒê·ª´ng ng·∫ßn ng·∫°i h·ªèi gi√°o vi√™n ho·∫∑c b·∫°n h·ªçc ƒë·ªÉ ƒë∆∞·ª£c gi√∫p ƒë·ª°\n3. **S·ª≠ d·ª•ng t·∫•t c·∫£ t√†i nguy√™n** - T·∫≠n d·ª•ng b√†i gi·∫£ng, b√†i t·∫≠p v√† di·ªÖn ƒë√†n th·∫£o lu·∫≠n\n4. **Theo d√µi ti·∫øn ƒë·ªô** - Gi√°m s√°t k·∫øt qu·∫£ h·ªçc t·∫≠p ƒë·ªÉ x√°c ƒë·ªãnh c√°c lƒ©nh v·ª±c c·∫ßn c·∫£i thi·ªán\n5. **K·∫øt n·ªëi** - Tham gia v√†o c·ªông ƒë·ªìng th√¥ng qua tin nh·∫Øn v√† th√¥ng b√°o\n\n**L·ªùi Khuy√™n Cho H·ªçc Sinh M·ªõi:**\n\n- B·∫Øt ƒë·∫ßu v·ªõi nh·ªØng ƒëi·ªÅu c∆° b·∫£n v√† d·∫ßn d·∫ßn kh√°m ph√° c√°c t√≠nh nƒÉng n√¢ng cao\n- Thi·∫øt l·∫≠p l·ªãch h·ªçc ph√π h·ª£p v·ªõi b·∫°n\n- ƒê·ª´ng s·ª£ m·∫Øc l·ªói - ƒë√≥ l√† c√°ch ch√∫ng ta h·ªçc!\n- K·∫øt n·ªëi v·ªõi c√°c h·ªçc sinh kh√°c c√≥ c√πng s·ªü th√≠ch\n\nT√¥i hy v·ªçng ƒëi·ªÅu n√†y s·∫Ω gi√∫p √≠ch cho ai ƒë√≥ trong h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa h·ªç!");
        blog5.setImageUrl("https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80");
        blog5.setThumbnailUrl("https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60");
        blog5.setTags("tr·∫£i nghi·ªám h·ªçc sinh, m·∫πo h·ªçc t·∫≠p, ƒë·ªông l·ª±c, c·ªông ƒë·ªìng");
        blog5.setAuthor(users.get(3)); // Student user
        blog5.setIsPublished(true);
        blog5.setStatus("published");
        blog5.setPublishedDate(now.minusHours(12));
        blog5.setLastEditedDate(now.minusHours(12));
        blog5.setLastEditedBy(users.get(3));
        blog5.setViewCount(23);
        blogRepository.save(blog5);
    }
    
    /**
     * Create sample accomplishments for testing
     */
    private void CreateAccomplishments() {
        // Get the student user we created
        User student = userRepository.findByUsername("student")
                .orElseThrow(() -> new RuntimeException("Student user not found"));
        
        // Create sample accomplishments
        Accomplishment math = new Accomplishment();
        math.setUser(student);
        math.setCourseTitle("Advanced Mathematics");
        math.setSubject("Mathematics");
        math.setTeacherName("Dr. John Smith");
        math.setGrade(85.5);
        math.setCompletionDate(LocalDate.now().minusDays(30));
        accomplishmentRepository.save(math);
        
        Accomplishment physics = new Accomplishment();
        physics.setUser(student);
        physics.setCourseTitle("Classical Physics");
        physics.setSubject("Physics");
        physics.setTeacherName("Prof. Jane Doe");
        physics.setGrade(92.0);
        physics.setCompletionDate(LocalDate.now().minusDays(15));
        accomplishmentRepository.save(physics);
        
        Accomplishment programming = new Accomplishment();
        programming.setUser(student);
        programming.setCourseTitle("Java Programming");
        programming.setSubject("Computer Science");
        programming.setTeacherName("Mr. Bob Wilson");
        programming.setGrade(88.5);
        programming.setCompletionDate(LocalDate.now().minusDays(7));
        accomplishmentRepository.save(programming);
    }
    
    /**
     * Create sample role requests for testing
     */
    private void CreateRequests() throws Exception {
        // Create a teacher role request
        TeacherRequestFormDTO teacherForm = new TeacherRequestFormDTO();
        teacherForm.setEmail("nguyenvanA@gmail.com");
        teacherForm.setFullName("Nguy·ªÖn VƒÉn A");
        teacherForm.setPhoneNumber("0987654321");
        teacherForm.setCvFileName("nguyen_van_a_cv.pdf");
        teacherForm.setCvFileType("application/pdf");
        teacherForm.setCvFileData("U2FtcGxlIENWIGZpbGUgY29udGVudC4gSW4gcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBiZSBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyBvZiBhIFBERiBmaWxlLg=="); // Sample base64 data
        teacherForm.setCvFileUrl("/files/teachers/nguyen_van_a_cv.pdf"); // This would be set by the service after upload
        teacherForm.setAdditionalInfo("T√¥i ƒë√£ c√≥ 5 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y To√°n c·∫•p trung h·ªçc. T√¥i t·ª´ng l√†m vi·ªác t·∫°i tr∆∞·ªùng THPT Chu VƒÉn An v√† l√† gi√°o vi√™n d·∫°y th√™m t·∫°i nhi·ªÅu trung t√¢m luy·ªán thi.");
        
        Request teacherRequest = new Request();
        teacherRequest.setEmail(teacherForm.getEmail());
        teacherRequest.setFullName(teacherForm.getFullName());
        teacherRequest.setPhoneNumber(teacherForm.getPhoneNumber());
        teacherRequest.setRequestedRole("TEACHER");
        teacherRequest.setFormResponses(objectMapper.writeValueAsString(teacherForm));
        teacherRequest.setStatus("PENDING");
        teacherRequest.setCreatedAt(LocalDateTime.now().minusDays(3));
        requestRepository.save(teacherRequest);
        
        // Create a student role request
        StudentRequestFormDTO studentForm = new StudentRequestFormDTO();
        studentForm.setEmail("tranvanB@gmail.com");
        studentForm.setFullName("Tr·∫ßn VƒÉn B");
        studentForm.setPhoneNumber("0987123456");
        studentForm.setGrade("L·ªõp 11");
        studentForm.setParentContact("Ph·ª• huynh: Tr·∫ßn Th·ªã C, SƒêT: 0912345678");
        studentForm.setAdditionalInfo("Em mu·ªën ƒëƒÉng k√Ω h·ªçc th√™m m√¥n To√°n v√† V·∫≠t l√Ω ƒë·ªÉ chu·∫©n b·ªã cho k·ª≥ thi qu·ªëc gia.");
        
        Request studentRequest = new Request();
        studentRequest.setEmail(studentForm.getEmail());
        studentRequest.setFullName(studentForm.getFullName());
        studentRequest.setPhoneNumber(studentForm.getPhoneNumber());
        studentRequest.setRequestedRole("STUDENT");
        studentRequest.setFormResponses(objectMapper.writeValueAsString(studentForm));
        studentRequest.setStatus("PENDING");
        studentRequest.setCreatedAt(LocalDateTime.now().minusDays(1));
        requestRepository.save(studentRequest);
    }

    private void CreateClassrooms(List<User> users) {
        User teacher = users.get(2); // Get teacher user
        User student = users.get(3); // Get student user

        // Create a Mathematics classroom
        Classroom mathClass = new Classroom();
        mathClass.setName("Advanced Mathematics 2024");
        mathClass.setDescription("Advanced mathematics course covering calculus, linear algebra, and probability theory");
        mathClass.setSubject("Mathematics");
        mathClass.setTeacher(teacher);
        mathClass.setSection("Section A");
        mathClass.getStudents().add(student);
        classroomRepository.save(mathClass);

        // Create a Physics classroom
        Classroom physicsClass = new Classroom();
        physicsClass.setName("Classical Physics");
        physicsClass.setDescription("Introduction to classical mechanics and thermodynamics");
        physicsClass.setSubject("Physics");
        physicsClass.setTeacher(teacher);
        physicsClass.setSection("Section B");
        physicsClass.getStudents().add(student);
        classroomRepository.save(physicsClass);

        // Create schedules for math class
        Schedule mathSchedule1 = new Schedule();
        mathSchedule1.setClassroom(mathClass);
        mathSchedule1.setDayOfWeek(DayOfWeek.MONDAY);
        mathSchedule1.setStartTime(LocalTime.of(9, 0));
        mathSchedule1.setEndTime(LocalTime.of(11, 0));
        mathSchedule1.setLocation("Room 101");
        scheduleRepository.save(mathSchedule1);

        Schedule mathSchedule2 = new Schedule();
        mathSchedule2.setClassroom(mathClass);
        mathSchedule2.setDayOfWeek(DayOfWeek.WEDNESDAY);
        mathSchedule2.setStartTime(LocalTime.of(9, 0));
        mathSchedule2.setEndTime(LocalTime.of(11, 0));
        mathSchedule2.setLocation("Room 101");
        scheduleRepository.save(mathSchedule2);

        // Create schedules for physics class
        Schedule physicsSchedule1 = new Schedule();
        physicsSchedule1.setClassroom(physicsClass);
        physicsSchedule1.setDayOfWeek(DayOfWeek.TUESDAY);
        physicsSchedule1.setStartTime(LocalTime.of(13, 0));
        physicsSchedule1.setEndTime(LocalTime.of(15, 0));
        physicsSchedule1.setLocation("Room 102");
        scheduleRepository.save(physicsSchedule1);

        Schedule physicsSchedule2 = new Schedule();
        physicsSchedule2.setClassroom(physicsClass);
        physicsSchedule2.setDayOfWeek(DayOfWeek.THURSDAY);
        physicsSchedule2.setStartTime(LocalTime.of(13, 0));
        physicsSchedule2.setEndTime(LocalTime.of(15, 0));
        physicsSchedule2.setLocation("Room 102");
        scheduleRepository.save(physicsSchedule2);

        // Create syllabus for math class
        Syllabus mathSyllabus = new Syllabus();
        mathSyllabus.setClassroom(mathClass);
        mathSyllabus.setTitle("Advanced Mathematics 2024 Syllabus");
        mathSyllabus.setContent("1. Introduction to Calculus\n2. Limits and Continuity\n3. Derivatives\n4. Integration\n5. Linear Algebra Basics\n6. Matrices and Determinants\n7. Vector Spaces\n8. Probability Theory");
        syllabusRepository.save(mathSyllabus);

        // Create syllabus for physics class
        Syllabus physicsSyllabus = new Syllabus();
        physicsSyllabus.setClassroom(physicsClass);
        physicsSyllabus.setTitle("Classical Physics Syllabus");
        physicsSyllabus.setContent("1. Introduction to Classical Mechanics\n2. Newton's Laws\n3. Work and Energy\n4. Momentum\n5. Rotational Motion\n6. Thermodynamics Laws\n7. Heat Transfer\n8. Ideal Gas Laws");
        syllabusRepository.save(physicsSyllabus);
    }

    private void CreateAssignments(List<User> users) {
        User teacher = users.get(2);
        User student = users.get(3);
        
        // Find math classroom
        List<Classroom> mathClasses = classroomRepository.findByTeacher(teacher);
        Classroom mathClass = mathClasses.stream()
                .filter(c -> "Mathematics".equals(c.getSubject()))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("Math classroom not found"));

        // Create a math assignment
        Assignment mathAssignment = new Assignment();
        mathAssignment.setTitle("Calculus Integration Problems");
        mathAssignment.setDescription("Solve the following integration problems. Show all your work and explain your steps.");
        mathAssignment.setClassroom(mathClass);
        mathAssignment.setDueDate(LocalDateTime.now().plusDays(7));
        mathAssignment.setPoints(100);
        assignmentRepository.save(mathAssignment);

        // Create a submission for the math assignment
        Submission mathSubmission = new Submission();
        mathSubmission.setAssignment(mathAssignment);
        mathSubmission.setStudent(student);
        mathSubmission.setSubmittedAt(LocalDateTime.now().minusDays(1));
        mathSubmission.setComment("Here are my solutions to the integration problems...");
        mathSubmission.setScore(85);
        mathSubmission.setFeedback("Good work! Remember to explain your steps more clearly.");
        mathSubmission.setGradedAt(LocalDateTime.now().minusHours(2));
        mathSubmission.setGradedBy(teacher);
        submissionRepository.save(mathSubmission);

        // Create another assignment
        Assignment mathAssignment2 = new Assignment();
        mathAssignment2.setTitle("Linear Algebra Quiz");
        mathAssignment2.setDescription("Complete the following problems on matrices and vector spaces.");
        mathAssignment2.setClassroom(mathClass);
        mathAssignment2.setDueDate(LocalDateTime.now().plusDays(14));
        mathAssignment2.setPoints(50);
        assignmentRepository.save(mathAssignment2);
    }

    private void CreateAttendance(List<User> users) {
        User teacher = users.get(2);
        User student = users.get(3);
        
        // Find math classroom
        List<Classroom> mathClasses = classroomRepository.findByTeacher(teacher);
        Classroom mathClass = mathClasses.stream()
                .filter(c -> "Mathematics".equals(c.getSubject()))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("Math classroom not found"));

        // Create attendance session for yesterday's class
        AttendanceSession yesterdaySession = new AttendanceSession();
        yesterdaySession.setClassroom(mathClass);
        yesterdaySession.setTeacher(teacher);
        yesterdaySession.setSessionName("Integration by Parts Lecture");
        yesterdaySession.setTitle("Integration by Parts");
        yesterdaySession.setDescription("Learning the technique of integration by parts and its applications");
        yesterdaySession.setSessionDate(LocalDateTime.now().minusDays(1));
        yesterdaySession.setStartTime(LocalDateTime.now().minusDays(1).withHour(9).withMinute(0));
        yesterdaySession.setEndTime(LocalDateTime.now().minusDays(1).withHour(11).withMinute(0));
        yesterdaySession.setSessionType("OFFLINE");
        yesterdaySession.setStatus(AttendanceSession.SessionStatus.COMPLETED);
        yesterdaySession.setCreatedAt(LocalDateTime.now().minusDays(2));
        attendanceSessionRepository.save(yesterdaySession);

        // Mark student's attendance for yesterday
        Attendance yesterdayAttendance = new Attendance();
        yesterdayAttendance.setSession(yesterdaySession);
        yesterdayAttendance.setStudent(student);
        yesterdayAttendance.setStatus(Attendance.AttendanceStatus.PRESENT);
        yesterdayAttendance.setCheckInTime(LocalDateTime.now().minusDays(1).withHour(9).withMinute(0));
        yesterdayAttendance.setCheckOutTime(LocalDateTime.now().minusDays(1).withHour(11).withMinute(0));
        yesterdayAttendance.setCreatedAt(LocalDateTime.now().minusDays(1));
        attendanceRepository.save(yesterdayAttendance);

        // Create attendance session for last week
        AttendanceSession lastWeekSession = new AttendanceSession();
        lastWeekSession.setClassroom(mathClass);
        lastWeekSession.setTeacher(teacher);
        lastWeekSession.setSessionName("Limits and Continuity Lecture");
        lastWeekSession.setTitle("Limits and Continuity");
        lastWeekSession.setDescription("Understanding limits and continuity in calculus");
        lastWeekSession.setSessionDate(LocalDateTime.now().minusDays(7));
        lastWeekSession.setStartTime(LocalDateTime.now().minusDays(7).withHour(9).withMinute(0));
        lastWeekSession.setEndTime(LocalDateTime.now().minusDays(7).withHour(11).withMinute(0));
        lastWeekSession.setSessionType("OFFLINE");
        lastWeekSession.setStatus(AttendanceSession.SessionStatus.COMPLETED);
        lastWeekSession.setCreatedAt(LocalDateTime.now().minusDays(8));
        attendanceSessionRepository.save(lastWeekSession);

        // Mark student's attendance for last week
        Attendance lastWeekAttendance = new Attendance();
        lastWeekAttendance.setSession(lastWeekSession);
        lastWeekAttendance.setStudent(student);
        lastWeekAttendance.setStatus(Attendance.AttendanceStatus.PRESENT);
        lastWeekAttendance.setCheckInTime(LocalDateTime.now().minusDays(7).withHour(9).withMinute(0));
        lastWeekAttendance.setCheckOutTime(LocalDateTime.now().minusDays(7).withHour(11).withMinute(0));
        lastWeekAttendance.setCreatedAt(LocalDateTime.now().minusDays(7));
        attendanceRepository.save(lastWeekAttendance);
    }

    private void CreateAnnouncements(List<User> users) {
        User teacher = users.get(2);
        
        // Find math classroom
        List<Classroom> mathClasses = classroomRepository.findByTeacher(teacher);
        Classroom mathClass = mathClasses.stream()
                .filter(c -> "Mathematics".equals(c.getSubject()))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("Math classroom not found"));

        // Create an important announcement
        Announcement announcement1 = new Announcement();
        announcement1.setTitle("Thay ƒë·ªïi l·ªãch h·ªçc tu·∫ßn t·ªõi");
        announcement1.setContent("Do tr√πng v·ªõi l·ªãch thi gi·ªØa k·ª≥, l·ªõp h·ªçc tu·∫ßn sau s·∫Ω ƒë∆∞·ª£c d·ªùi sang th·ª© 5 thay v√¨ th·ª© 4 nh∆∞ th∆∞·ªùng l·ªá. Mong c√°c em l∆∞u √Ω v√† s·∫Øp x·∫øp th·ªùi gian ph√π h·ª£p.");
        announcement1.setClassroomId(mathClass.getId());
        announcement1.setCreatedBy(teacher.getId());
        announcement1.setPriority(Announcement.Priority.HIGH);
        announcement1.setCreatedAt(LocalDateTime.now());
        announcement1.setStatus(Announcement.AnnouncementStatus.ACTIVE);
        announcementRepository.save(announcement1);

        // Create an announcement with attachment
        Announcement announcement2 = new Announcement();
        announcement2.setTitle("T√†i li·ªáu √¥n t·∫≠p Gi·∫£i t√≠ch");
        announcement2.setContent("C√°c em tham kh·∫£o t√†i li·ªáu √¥n t·∫≠p ƒë√≠nh k√®m ƒë·ªÉ chu·∫©n b·ªã cho b√†i ki·ªÉm tra tu·∫ßn sau. T√†i li·ªáu bao g·ªìm c√°c d·∫°ng b√†i t·∫≠p quan tr·ªçng v√† m·ªôt s·ªë v√≠ d·ª• minh h·ªça.");
        announcement2.setClassroomId(mathClass.getId());
        announcement2.setCreatedBy(teacher.getId());
        announcement2.setPriority(Announcement.Priority.NORMAL);
        announcement2.setCreatedAt(LocalDateTime.now().minusDays(2));
        announcement2.setStatus(Announcement.AnnouncementStatus.ACTIVE);
        announcement2.setAttachmentsCount(1);
        announcementRepository.save(announcement2);

        // Create attachment for announcement2
        AnnouncementAttachment attachment = new AnnouncementAttachment();
        attachment.setAnnouncementId(announcement2.getId());
        attachment.setFileName("on_tap_giai_tich.pdf");
        attachment.setFileType("application/pdf");
        attachment.setFilePath("/files/announcements/on_tap_giai_tich.pdf");
        attachment.setFileSize(1024L); // 1KB sample size
        attachment.setUploadedAt(LocalDateTime.now().minusDays(2));
        announcementAttachmentRepository.save(attachment);
    }
}