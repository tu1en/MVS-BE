package com.classroomapp.classroombackend.config.seed;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.classroomapp.classroombackend.model.Lecture;
import com.classroomapp.classroombackend.model.Schedule;
import com.classroomapp.classroombackend.model.classroommanagement.Classroom;
import com.classroomapp.classroombackend.repository.LectureMaterialRepository;
import com.classroomapp.classroombackend.repository.LectureRepository;
import com.classroomapp.classroombackend.repository.ScheduleRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomRepository;

@Component
@Transactional
public class LectureSeeder {

    @Autowired
    private LectureRepository lectureRepository;

    @Autowired
    private LectureMaterialRepository lectureMaterialRepository;

    @Autowired
    private ClassroomRepository classroomRepository;

    @Autowired
    private ScheduleRepository scheduleRepository; // Inject ScheduleRepository

    @Transactional
    public void seed(List<Classroom> classrooms) {
        System.out.println("üîÑ [LectureSeeder] Starting lecture seeding process...");

        if (classrooms.isEmpty()) {
            System.out.println("‚ö†Ô∏è [LectureSeeder] No classrooms provided. Skipping.");
            return;
        }

        System.out.println("üìö [LectureSeeder] Checking " + classrooms.size() + " classrooms for lectures...");

        for (Classroom classroom : classrooms) {
            // Check if this specific classroom already has lectures
            if (lectureRepository.existsByClassroomId(classroom.getId())) {
                System.out.println("‚úÖ [LectureSeeder] Classroom '" + classroom.getName() + "' already has lectures. Skipping.");
                continue;
            }

            System.out.println("üîß [LectureSeeder] No lectures found for '" + classroom.getName() + "'. Creating now...");

            if (classroom.getName().contains("To√°n")) {
                createMathLectures(classroom);
            } else {
                createSampleLecturesForClassroom(classroom);
            }
        }

        long totalLectures = lectureRepository.count();
        System.out.println("‚úÖ [LectureSeeder] Seeding process completed. Total lectures in database: " + totalLectures);
    }

    private void createMathLectures(Classroom mathClass) {
        System.out.println("üßÆ [LectureSeeder] Creating lectures for Math classroom: " + mathClass.getName());

        // Try to find a schedule for this classroom, but don't require it
        List<Schedule> schedules = scheduleRepository.findByClassroomId(mathClass.getId());
        Schedule scheduleToLink = schedules.isEmpty() ? null : schedules.get(0);

        if (scheduleToLink != null) {
            System.out.println("‚úÖ [LectureSeeder] Found schedule to link: " + scheduleToLink.getSubject());
        } else {
            System.out.println("‚ö†Ô∏è [LectureSeeder] No schedule found for Math classroom, creating lectures without schedule link");
        }

        // Lecture 1
        Lecture mathLecture1 = new Lecture();
        mathLecture1.setTitle("Gi·ªõi thi·ªáu v·ªÅ ƒê·∫°o h√†m");
        mathLecture1.setContent("# Gi·ªõi thi·ªáu v·ªÅ ƒê·∫°o h√†m\n\n## ƒê·ªãnh nghƒ©a ƒë·∫°o h√†m\n\nƒê·∫°o h√†m c·ªßa m·ªôt h√†m s·ªë f(x) t·∫°i ƒëi·ªÉm x‚ÇÄ, k√Ω hi·ªáu l√† f'(x‚ÇÄ), ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√†:\n\nf'(x‚ÇÄ) = lim(h‚Üí0) [f(x‚ÇÄ+h) - f(x‚ÇÄ)]/h\n\nƒê·∫°o h√†m cho ta bi·∫øt t·ªëc ƒë·ªô bi·∫øn thi√™n c·ªßa h√†m s·ªë t·∫°i m·ªôt ƒëi·ªÉm.\n\n## C√°c quy t·∫Øc t√≠nh ƒë·∫°o h√†m\n\n1. ƒê·∫°o h√†m c·ªßa h·∫±ng s·ªë: (C)' = 0\n2. ƒê·∫°o h√†m c·ªßa x^n: (x^n)' = n*x^(n-1)\n3. ƒê·∫°o h√†m c·ªßa t·ªïng, hi·ªáu: (u ¬± v)' = u' ¬± v'\n4. ƒê·∫°o h√†m c·ªßa t√≠ch: (uv)' = u'v + uv'\n5. ƒê·∫°o h√†m c·ªßa th∆∞∆°ng: (u/v)' = (u'v - uv')/v¬≤");
        mathLecture1.setClassroom(mathClass);
        mathLecture1.setLectureDate(LocalDate.of(2025, 7, 9)); // Date in the past for history
        if (scheduleToLink != null) {
            mathLecture1.setSchedule(scheduleToLink);
        }
        lectureRepository.save(mathLecture1);
        System.out.println("‚úÖ [LectureSeeder] Created lecture 1: " + mathLecture1.getTitle());

        // Lecture 2
        Lecture mathLecture2 = new Lecture();
        mathLecture2.setTitle("T√≠ch ph√¢n v√† ·ª®ng d·ª•ng");
        mathLecture2.setContent("# T√≠ch ph√¢n v√† ·ª®ng d·ª•ng\n\n## Nguy√™n h√†m\n\nN·∫øu F'(x) = f(x) th√¨ F(x) ƒë∆∞·ª£c g·ªçi l√† m·ªôt nguy√™n h√†m c·ªßa f(x).\n\n## T√≠ch ph√¢n x√°c ƒë·ªãnh\n\nT√≠ch ph√¢n x√°c ƒë·ªãnh c·ªßa f(x) t·ª´ a ƒë·∫øn b, k√Ω hi·ªáu l√† ‚à´[a,b] f(x)dx, cho ta di·ªán t√≠ch h√¨nh thang cong gi·ªõi h·∫°n b·ªüi ƒë·ªì th·ªã y=f(x), tr·ª•c Ox v√† hai ƒë∆∞·ªùng th·∫≥ng x=a, x=b.\n\n## ·ª®ng d·ª•ng c·ªßa t√≠ch ph√¢n\n\n1. T√≠nh di·ªán t√≠ch h√¨nh ph·∫≥ng\n2. T√≠nh th·ªÉ t√≠ch v·∫≠t th·ªÉ tr√≤n xoay\n3. T√≠nh ƒë·ªô d√†i cung\n4. ·ª®ng d·ª•ng trong v·∫≠t l√Ω v√† k·ªπ thu·∫≠t");
        mathLecture2.setClassroom(mathClass);
        mathLecture2.setLectureDate(LocalDate.now().plusDays(2)); // Date in the future
        if (scheduleToLink != null) {
            mathLecture2.setSchedule(scheduleToLink);
        }
        lectureRepository.save(mathLecture2);
        System.out.println("‚úÖ [LectureSeeder] Created lecture 2: " + mathLecture2.getTitle());

        // Lecture 3 - Additional lecture for more content
        Lecture mathLecture3 = new Lecture();
        mathLecture3.setTitle("Ph∆∞∆°ng tr√¨nh vi ph√¢n");
        mathLecture3.setContent("# Ph∆∞∆°ng tr√¨nh vi ph√¢n\n\n## Kh√°i ni·ªám c∆° b·∫£n\n\nPh∆∞∆°ng tr√¨nh vi ph√¢n l√† ph∆∞∆°ng tr√¨nh ch·ª©a h√†m s·ªë ch∆∞a bi·∫øt v√† c√°c ƒë·∫°o h√†m c·ªßa n√≥.\n\n## Ph∆∞∆°ng tr√¨nh vi ph√¢n c·∫•p 1\n\nD·∫°ng t·ªïng qu√°t: F(x, y, y') = 0\n\n### Ph∆∞∆°ng tr√¨nh t√°ch bi·∫øn\n\nD·∫°ng: dy/dx = f(x)g(y)\n\nC√°ch gi·∫£i: ‚à´dy/g(y) = ‚à´f(x)dx\n\n### Ph∆∞∆°ng tr√¨nh tuy·∫øn t√≠nh c·∫•p 1\n\nD·∫°ng: y' + P(x)y = Q(x)\n\nC√¥ng th·ª©c nghi·ªám: y = e^(-‚à´P(x)dx)[‚à´Q(x)e^(‚à´P(x)dx)dx + C]");
        mathLecture3.setClassroom(mathClass);
        mathLecture3.setLectureDate(LocalDate.now().plusDays(7)); // Next week
        if (scheduleToLink != null) {
            mathLecture3.setSchedule(scheduleToLink);
        }
        lectureRepository.save(mathLecture3);
        System.out.println("‚úÖ [LectureSeeder] Created lecture 3: " + mathLecture3.getTitle());

        System.out.println("‚úÖ [LectureSeeder] Successfully created 3 lectures for Math classroom");
    }

    private void createLecturesForOtherClassrooms(List<Classroom> classrooms) {
        System.out.println("üìö [LectureSeeder] Creating lectures for other classrooms...");

        for (Classroom classroom : classrooms) {
            // Skip if it's the Math classroom (already handled)
            if (classroom.getName().contains("To√°n")) {
                continue;
            }

            // Create 1-2 sample lectures for each other classroom
            createSampleLecturesForClassroom(classroom);
        }
    }

    private void createSampleLecturesForClassroom(Classroom classroom) {
        System.out.println("üìñ [LectureSeeder] Creating sample lectures for: " + classroom.getName());

        // Try to find a schedule for this classroom
        List<Schedule> schedules = scheduleRepository.findByClassroomId(classroom.getId());
        Schedule scheduleToLink = schedules.isEmpty() ? null : schedules.get(0);

        // Create a generic lecture based on classroom name/subject
        Lecture lecture1 = new Lecture();
        lecture1.setTitle("B√†i gi·∫£ng gi·ªõi thi·ªáu - " + classroom.getName());
        lecture1.setContent("# B√†i gi·∫£ng gi·ªõi thi·ªáu\n\n## Ch√†o m·ª´ng ƒë·∫øn v·ªõi kh√≥a h·ªçc " + classroom.getName() + "\n\nƒê√¢y l√† b√†i gi·∫£ng ƒë·∫ßu ti√™n trong kh√≥a h·ªçc. Ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ:\n\n- M·ª•c ti√™u c·ªßa kh√≥a h·ªçc\n- N·ªôi dung ch√≠nh\n- Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p\n- ƒê√°nh gi√° v√† ki·ªÉm tra\n\n## Y√™u c·∫ßu\n\n- Tham gia ƒë·∫ßy ƒë·ªß c√°c bu·ªïi h·ªçc\n- Ho√†n th√†nh b√†i t·∫≠p ƒë∆∞·ª£c giao\n- T√≠ch c·ª±c tham gia th·∫£o lu·∫≠n\n\nCh√∫c c√°c b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£!");
        lecture1.setClassroom(classroom);
        lecture1.setLectureDate(LocalDate.now().minusDays(1)); // Yesterday
        if (scheduleToLink != null) {
            lecture1.setSchedule(scheduleToLink);
        }
        lectureRepository.save(lecture1);

        // Create a second lecture
        Lecture lecture2 = new Lecture();
        lecture2.setTitle("B√†i h·ªçc th·ª±c h√†nh - " + classroom.getName());
        lecture2.setContent("# B√†i h·ªçc th·ª±c h√†nh\n\n## M·ª•c ti√™u\n\nTrong b√†i h·ªçc n√†y, ch√∫ng ta s·∫Ω:\n\n- √Åp d·ª•ng ki·∫øn th·ª©c ƒë√£ h·ªçc\n- Th·ª±c h√†nh qua c√°c b√†i t·∫≠p\n- Th·∫£o lu·∫≠n v√† gi·∫£i ƒë√°p th·∫Øc m·∫Øc\n\n## N·ªôi dung th·ª±c h√†nh\n\n1. √în t·∫≠p ki·∫øn th·ª©c c∆° b·∫£n\n2. Gi·∫£i c√°c b√†i t·∫≠p m·∫´u\n3. Th·ª±c h√†nh ƒë·ªôc l·∫≠p\n4. Th·∫£o lu·∫≠n k·∫øt qu·∫£\n\n## B√†i t·∫≠p v·ªÅ nh√†\n\nHo√†n th√†nh c√°c b√†i t·∫≠p ƒë∆∞·ª£c giao v√† chu·∫©n b·ªã cho bu·ªïi h·ªçc ti·∫øp theo.");
        lecture2.setClassroom(classroom);
        lecture2.setLectureDate(LocalDate.now().plusDays(3)); // In a few days
        if (scheduleToLink != null) {
            lecture2.setSchedule(scheduleToLink);
        }
        lectureRepository.save(lecture2);

        System.out.println("‚úÖ [LectureSeeder] Created 2 sample lectures for: " + classroom.getName());
    }

    private Classroom findClassroomByPartialName(List<Classroom> classrooms, String partialName) {
        return classrooms.stream()
                .filter(c -> c.getName().contains(partialName))
                .findFirst()
                .orElse(null);
    }

    /**
     * Force re-seed lectures (for debugging purposes)
     * This method will clear existing lectures and create new ones
     */
    @Transactional
    public void forceSeed(List<Classroom> classrooms) {
        System.out.println("üîÑ [LectureSeeder] FORCE SEEDING - Clearing existing lectures...");

        // Clear existing lectures
        lectureRepository.deleteAll();
        System.out.println("‚úÖ [LectureSeeder] Cleared all existing lectures");

        // Now seed fresh lectures, but avoid the logic that skips everything
        System.out.println("üìö [LectureSeeder] Force seeding lectures for all " + classrooms.size() + " classrooms...");
        for (Classroom classroom : classrooms) {
            if (classroom.getName().contains("To√°n")) {
                createMathLectures(classroom);
            } else {
                createSampleLecturesForClassroom(classroom);
            }
        }
    }

    /**
     * Verify lectures exist for a specific classroom
     */
    public void verifyLecturesForClassroom(Long classroomId) {
        List<Lecture> lectures = lectureRepository.findByClassroomId(classroomId);
        System.out.println("üîç [LectureSeeder] Verification for classroom " + classroomId + ": " + lectures.size() + " lectures found");

        if (lectures.isEmpty()) {
            System.out.println("‚ùå [LectureSeeder] WARNING: No lectures found for classroom " + classroomId);

            // Try to find the classroom and create lectures
            Classroom classroom = classroomRepository.findById(classroomId).orElse(null);
            if (classroom != null) {
                System.out.println("üîß [LectureSeeder] Attempting to create lectures for classroom: " + classroom.getName());
                if (classroom.getName().contains("To√°n")) {
                    createMathLectures(classroom);
                } else {
                    createSampleLecturesForClassroom(classroom);
                }
            }
        } else {
            for (Lecture lecture : lectures) {
                System.out.println("   - " + lecture.getTitle() + " (ID: " + lecture.getId() + ", Date: " + lecture.getLectureDate() + ")");
            }
        }
    }
}