package com.classroomapp.classroombackend.config.seed;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.springframework.stereotype.Component;

import com.classroomapp.classroombackend.model.Absence;
import com.classroomapp.classroombackend.repository.absencemanagement.AbsenceRepository;
import com.classroomapp.classroombackend.repository.usermanagement.UserRepository;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class AbsenceSeeder {

    private final AbsenceRepository absenceRepository;
    private final UserRepository userRepository;

    public void seed() {
        System.out.println("üå± [AbsenceSeeder] Starting absence seeding...");
        long existingCount = absenceRepository.count();
        System.out.println("üîç [AbsenceSeeder] Found " + existingCount + " existing absence records");
        
        if (existingCount > 0) {
            System.out.println("‚úÖ [AbsenceSeeder] Absence data already exists. Skipping seeding.");
            return;
        }

        // Verify that users exist before creating absence records
        long userCount = userRepository.count();
        if (userCount == 0) {
            System.err.println("‚ùå [AbsenceSeeder] No users found. Please run UserSeeder first.");
            return;
        }
        
        // Verify specific teacher users exist
        Long[] teacherIds = {2L, 5L, 6L, 7L, 13L, 14L}; // Updated with actual IDs
        for (Long teacherId : teacherIds) {
            if (!userRepository.existsById(teacherId)) {
                System.err.println("‚ùå [AbsenceSeeder] Teacher with ID " + teacherId + " not found. Skipping absence seeding.");
                return;
            }
        }

        try {
            System.out.println("üî® [AbsenceSeeder] Creating absence records...");
            
            // Nguy·ªÖn VƒÉn Minh (ID: 2) - ƒë√£ d√πng 5 ng√†y, c√≤n 7 ng√†y
            System.out.println("üìù [AbsenceSeeder] Creating absence for Nguy·ªÖn VƒÉn Minh (ID: 2)");
            createAbsence(2L, "teacher@test.com", "Nguy·ªÖn VƒÉn Minh", 
                LocalDate.now().minusDays(30), LocalDate.now().minusDays(28), 3, 
                "Ngh·ªâ ph√©p ƒë·ªÉ tham gia h·ªôi th·∫£o gi√°o d·ª•c v·ªÅ c√¥ng ngh·ªá th√¥ng tin", "APPROVED");
            
            createAbsence(2L, "teacher@test.com", "Nguy·ªÖn VƒÉn Minh",
                LocalDate.now().minusDays(15), LocalDate.now().minusDays(14), 2,
                "Ngh·ªâ ·ªëm do c·∫£m c√∫m m√πa", "APPROVED");

            // Tr·∫ßn VƒÉn ƒê·ª©c (ID: 5) - ƒë√£ d√πng 8 ng√†y, c√≥ ƒë∆°n ch·ªù 3 ng√†y (s·∫Ω v∆∞·ª£t ph√©p)
            createAbsence(5L, "math@test.com", "Tr·∫ßn VƒÉn ƒê·ª©c",
                LocalDate.now().minusDays(45), LocalDate.now().minusDays(43), 3,
                "Ngh·ªâ ph√©p v·ªÅ qu√™ ƒÉn t·∫øt c√πng gia ƒë√¨nh", "APPROVED");
            
            createAbsence(5L, "math@test.com", "Tr·∫ßn VƒÉn ƒê·ª©c",
                LocalDate.now().minusDays(25), LocalDate.now().minusDays(21), 5,
                "Ngh·ªâ ph√©p chƒÉm s√≥c m·∫π gi√† ·ªëm ƒëau", "APPROVED");
            
            createAbsence(5L, "math@test.com", "Tr·∫ßn VƒÉn ƒê·ª©c",
                LocalDate.now().plusDays(10), LocalDate.now().plusDays(12), 3,
                "Xin ngh·ªâ ph√©p ƒë·ªÉ tham d·ª± ƒë√°m c∆∞·ªõi con trai", "PENDING", true);

            // Ph·∫°m Th·ªã Lan (ID: 6) - ƒë√£ v∆∞·ª£t ph√©p (d√πng 15 ng√†y)
            createAbsence(6L, "literature@test.com", "Ph·∫°m Th·ªã Lan",
                LocalDate.now().minusDays(60), LocalDate.now().minusDays(53), 8,
                "Ngh·ªâ ph√©p sinh con v√† chƒÉm s√≥c sau sinh", "APPROVED");
            
            createAbsence(6L, "literature@test.com", "Ph·∫°m Th·ªã Lan",
                LocalDate.now().minusDays(35), LocalDate.now().minusDays(29), 7,
                "Ngh·ªâ ph√©p ti·∫øp t·ª•c chƒÉm s√≥c con nh·ªè b·ªã ·ªëm", "APPROVED", true);

            // L√™ Ho√†ng Nam (ID: 7) - ƒë√£ d√πng 4 ng√†y, c√≥ ƒë∆°n ch·ªù 2 ng√†y
            createAbsence(7L, "english@test.com", "L√™ Ho√†ng Nam",
                LocalDate.now().minusDays(50), LocalDate.now().minusDays(47), 4,
                "Ngh·ªâ ph√©p ƒëi du l·ªãch ƒê√† L·∫°t c√πng gia ƒë√¨nh", "APPROVED");
            
            createAbsence(7L, "english@test.com", "L√™ Ho√†ng Nam",
                LocalDate.now().plusDays(5), LocalDate.now().plusDays(6), 2,
                "Xin ngh·ªâ ph√©p ƒë·ªÉ kh√°m s·ª©c kh·ªèe t·ªïng qu√°t ƒë·ªãnh k·ª≥", "PENDING");

            // V≈© Th·ªã H∆∞∆°ng (ID: 13) - c√≥ ƒë∆°n b·ªã t·ª´ ch·ªëi
            createAbsence(13L, "teacher2@test.com", "V≈© Th·ªã H∆∞∆°ng",
                LocalDate.now().minusDays(40), LocalDate.now().minusDays(38), 3,
                "Ngh·ªâ ph√©p tham gia kh√≥a ƒë√†o t·∫°o n√¢ng cao v·ªÅ h√≥a h·ªçc", "APPROVED");
            
            createAbsence(13L, "teacher2@test.com", "V≈© Th·ªã H∆∞∆°ng",
                LocalDate.now().minusDays(10), LocalDate.now().minusDays(5), 6,
                "Xin ngh·ªâ ph√©p ƒë·ªÉ ƒëi du l·ªãch ngh·ªâ d∆∞·ª°ng t·∫°i Nha Trang", "REJECTED", false, "Th·ªùi gian xin ngh·ªâ tr√πng v·ªõi l·ªãch thi gi·ªØa k·ª≥ c·ªßa sinh vi√™n");

            // ƒê·∫∑ng Minh Tu·∫•n (ID: 14) - m·ªõi v√†o, ch∆∞a xin ngh·ªâ
            createAbsence(14L, "teacher3@test.com", "ƒê·∫∑ng Minh Tu·∫•n",
                LocalDate.now().plusDays(20), LocalDate.now().plusDays(21), 2,
                "Xin ngh·ªâ ph√©p ƒë·ªÉ tham gia h·ªôi ngh·ªã qu·ªëc t·∫ø v·ªÅ v·∫≠t l√Ω", "PENDING");

            // Accountant (ID: 501) - ƒë√£ d√πng 2 ng√†y, c√≤n 10 ng√†y, c√≥ 1 ƒë∆°n ch·ªù duy·ªát
            if (userRepository.existsById(501L)) {
                createAbsence(501L, "accountant@test.com", "Nguy·ªÖn Th·ªã K·∫ø To√°n",
                    LocalDate.now().minusDays(10), LocalDate.now().minusDays(9), 2,
                    "Ngh·ªâ ph√©p ki·ªÉm to√°n cu·ªëi nƒÉm", "APPROVED");
                createAbsence(501L, "accountant@test.com", "Nguy·ªÖn Th·ªã K·∫ø To√°n",
                    LocalDate.now().plusDays(3), LocalDate.now().plusDays(3), 1,
                    "Ngh·ªâ ph√©p c√° nh√¢n", "PENDING");
            }

            System.out.println("‚úÖ [AbsenceSeeder] Created sample absence requests for all teachers.");
        } catch (Exception e) {
            System.err.println("‚ùå Error creating sample absence requests: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void createAbsence(Long userId, String userEmail, String userFullName,
                              LocalDate startDate, LocalDate endDate, Integer numberOfDays,
                              String description, String status) {
        createAbsence(userId, userEmail, userFullName, startDate, endDate, numberOfDays,
                     description, status, false, null);
    }

    private void createAbsence(Long userId, String userEmail, String userFullName,
                              LocalDate startDate, LocalDate endDate, Integer numberOfDays,
                              String description, String status, boolean isOverLimit) {
        createAbsence(userId, userEmail, userFullName, startDate, endDate, numberOfDays,
                     description, status, isOverLimit, null);
    }

    private void createAbsence(Long userId, String userEmail, String userFullName,
                              LocalDate startDate, LocalDate endDate, Integer numberOfDays,
                              String description, String status, boolean isOverLimit, String rejectReason) {
        Absence absence = new Absence();
        absence.setUserId(userId);
        absence.setUserEmail(userEmail);
        absence.setUserFullName(userFullName);
        absence.setStartDate(startDate);
        absence.setEndDate(endDate);
        absence.setNumberOfDays(numberOfDays);
        absence.setDescription(description);
        absence.setStatus(status);
        absence.setIsOverLimit(isOverLimit);
        
        if ("REJECTED".equals(status)) {
            absence.setResultStatus("REJECTED");
            absence.setRejectReason(rejectReason);
            absence.setProcessedAt(LocalDateTime.now().minusDays(1));
        } else if ("APPROVED".equals(status)) {
            absence.setResultStatus("APPROVED");
            absence.setProcessedAt(LocalDateTime.now().minusDays(2));
        }
        
        // Set created time based on start date
        if (startDate.isBefore(LocalDate.now())) {
            absence.setCreatedAt(startDate.minusDays(7).atStartOfDay());
        } else {
            absence.setCreatedAt(LocalDateTime.now().minusDays(3));
        }
        
        Absence savedAbsence = absenceRepository.save(absence);
        System.out.println("‚úÖ [AbsenceSeeder] Saved absence ID: " + savedAbsence.getId() + " for " + userFullName);
    }
} 