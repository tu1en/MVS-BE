package com.classroomapp.classroombackend.config.seed;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.classroomapp.classroombackend.model.assignmentmanagement.Assignment;
import com.classroomapp.classroombackend.model.assignmentmanagement.Submission;
import com.classroomapp.classroombackend.model.classroommanagement.Classroom;
import com.classroomapp.classroombackend.model.classroommanagement.ClassroomEnrollment;
import com.classroomapp.classroombackend.model.classroommanagement.ClassroomEnrollmentId;
import com.classroomapp.classroombackend.model.usermanagement.User;
import com.classroomapp.classroombackend.repository.assignmentmanagement.AssignmentRepository;
import com.classroomapp.classroombackend.repository.assignmentmanagement.SubmissionRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomEnrollmentRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomRepository;
import com.classroomapp.classroombackend.repository.usermanagement.UserRepository;

/**
 * Data seeder ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho classroom "T√¥n"
 * Bao g·ªìm:
 * - 5 b√†i t·∫≠p c·∫ßn ch·∫•m ƒëi·ªÉm (c√≥ submission nh∆∞ng ch∆∞a c√≥ grade)
 * - 5 b√†i t·∫≠p s·∫Øp h·∫øt h·∫°n (due_date trong 1-3 ng√†y t·ªõi)
 * - 5 b√†i t·∫≠p ƒë√£ h·∫øt h·∫°n (due_date ƒë√£ qua 1-7 ng√†y)
 * - 5 h·ªçc sinh m·ªõi v·ªõi enrollment v√†o classroom "T√¥n"
 */
@Component
public class TonClassroomDataSeeder {

    @Autowired
    private ClassroomRepository classroomRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AssignmentRepository assignmentRepository;

    @Autowired
    private SubmissionRepository submissionRepository;

    @Autowired
    private ClassroomEnrollmentRepository enrollmentRepository;

    @Transactional
    public void seedTonClassroomData() {
        System.out.println("üîÑ [TonClassroomDataSeeder] B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho classroom T√¥n...");

        // T√¨m classroom "T√¥n" (ID = 1 - "To√°n cao c·∫•p A1")
        Optional<Classroom> tonClassroomOpt = classroomRepository.findById(1L);
        if (!tonClassroomOpt.isPresent()) {
            System.out.println("‚ùå [TonClassroomDataSeeder] Kh√¥ng t√¨m th·∫•y classroom T√¥n (ID=1)");
            return;
        }

        Classroom tonClassroom = tonClassroomOpt.get();
        System.out.println("‚úÖ [TonClassroomDataSeeder] T√¨m th·∫•y classroom: " + tonClassroom.getName());

        // T·∫°o 5 h·ªçc sinh m·ªõi
        List<User> newStudents = createNewStudents();
        System.out.println("‚úÖ [TonClassroomDataSeeder] ƒê√£ t·∫°o " + newStudents.size() + " h·ªçc sinh m·ªõi");

        // ƒêƒÉng k√Ω h·ªçc sinh v√†o classroom
        enrollStudentsToClassroom(tonClassroom, newStudents);
        System.out.println("‚úÖ [TonClassroomDataSeeder] ƒê√£ ƒëƒÉng k√Ω h·ªçc sinh v√†o classroom");

        // L·∫•y danh s√°ch t·∫•t c·∫£ h·ªçc sinh trong classroom (bao g·ªìm c·∫£ h·ªçc sinh c≈©)
        List<User> allStudents = getAllStudentsInClassroom(tonClassroom);
        System.out.println("‚úÖ [TonClassroomDataSeeder] T·ªïng s·ªë h·ªçc sinh trong classroom: " + allStudents.size());

        // T·∫°o 5 b√†i t·∫≠p c·∫ßn ch·∫•m ƒëi·ªÉm
        List<Assignment> needGradingAssignments = createNeedGradingAssignments(tonClassroom);
        createSubmissionsForAssignments(needGradingAssignments, allStudents, tonClassroom, false); // false = ch∆∞a ch·∫•m ƒëi·ªÉm
        System.out.println("‚úÖ [TonClassroomDataSeeder] ƒê√£ t·∫°o " + needGradingAssignments.size() + " b√†i t·∫≠p c·∫ßn ch·∫•m ƒëi·ªÉm");

        // T·∫°o 5 b√†i t·∫≠p s·∫Øp h·∫øt h·∫°n
        List<Assignment> upcomingAssignments = createUpcomingAssignments(tonClassroom);
        System.out.println("‚úÖ [TonClassroomDataSeeder] ƒê√£ t·∫°o " + upcomingAssignments.size() + " b√†i t·∫≠p s·∫Øp h·∫øt h·∫°n");

        // T·∫°o 5 b√†i t·∫≠p ƒë√£ h·∫øt h·∫°n
        List<Assignment> overdueAssignments = createOverdueAssignments(tonClassroom);
        createSubmissionsForAssignments(overdueAssignments, allStudents, tonClassroom, true); // true = c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng c√≥ submission
        System.out.println("‚úÖ [TonClassroomDataSeeder] ƒê√£ t·∫°o " + overdueAssignments.size() + " b√†i t·∫≠p ƒë√£ h·∫øt h·∫°n");

        System.out.println("üéâ [TonClassroomDataSeeder] Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u cho classroom T√¥n!");
    }

    /**
     * T·∫°o 5 h·ªçc sinh m·ªõi
     */
    private List<User> createNewStudents() {
        List<User> students = new ArrayList<>();
        String[] studentNames = {
            "Nguy·ªÖn VƒÉn An", "Tr·∫ßn Th·ªã B√¨nh", "L√™ Ho√†ng C∆∞·ªùng", 
            "Ph·∫°m Th·ªã Dung", "Ho√†ng VƒÉn Em"
        };
        String[] studentEmails = {
            "nguyenvanan.ton@student.edu.vn", "tranthibinh.ton@student.edu.vn", 
            "lehoangcuong.ton@student.edu.vn", "phamthidung.ton@student.edu.vn", 
            "hoangvanem.ton@student.edu.vn"
        };

        for (int i = 0; i < 5; i++) {
            // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            if (userRepository.findByEmail(studentEmails[i]).isPresent()) {
                System.out.println("‚ö†Ô∏è [TonClassroomDataSeeder] Email ƒë√£ t·ªìn t·∫°i: " + studentEmails[i]);
                continue;
            }

            User student = new User();
            student.setUsername("student_ton_" + (i + 1));
            student.setEmail(studentEmails[i]);
            student.setFullName(studentNames[i]);
            student.setPassword("$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lbdxIh0Ca5gZb8YS6"); // password: 123456
            student.setRoleId(1); // STUDENT role
            student.setStatus("active");
            student.setCreatedAt(LocalDateTime.now());
            student.setUpdatedAt(LocalDateTime.now());

            User savedStudent = userRepository.save(student);
            students.add(savedStudent);
            System.out.println("‚úÖ [TonClassroomDataSeeder] T·∫°o h·ªçc sinh: " + savedStudent.getFullName() + " (ID=" + savedStudent.getId() + ")");
        }

        return students;
    }

    /**
     * ƒêƒÉng k√Ω h·ªçc sinh v√†o classroom
     */
    private void enrollStudentsToClassroom(Classroom classroom, List<User> students) {
        for (User student : students) {
            // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng k√Ω ch∆∞a
            Optional<ClassroomEnrollment> existingEnrollment = 
                enrollmentRepository.findByClassroomIdAndUserId(classroom.getId(), student.getId());
            
            if (existingEnrollment.isPresent()) {
                System.out.println("‚ö†Ô∏è [TonClassroomDataSeeder] H·ªçc sinh ƒë√£ ƒëƒÉng k√Ω: " + student.getFullName());
                continue;
            }

            ClassroomEnrollment enrollment = new ClassroomEnrollment();
            ClassroomEnrollmentId enrollmentId = new ClassroomEnrollmentId(classroom.getId(), student.getId());
            enrollment.setId(enrollmentId);
            enrollment.setClassroom(classroom);
            enrollment.setUser(student);

            enrollmentRepository.save(enrollment);
            System.out.println("‚úÖ [TonClassroomDataSeeder] ƒêƒÉng k√Ω h·ªçc sinh: " + student.getFullName() + " v√†o classroom: " + classroom.getName());
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ h·ªçc sinh trong classroom
     */
    private List<User> getAllStudentsInClassroom(Classroom classroom) {
        List<ClassroomEnrollment> enrollments = enrollmentRepository.findByClassroomId(classroom.getId());
        List<User> students = new ArrayList<>();
        
        for (ClassroomEnrollment enrollment : enrollments) {
            User user = enrollment.getUser();
            if (user.getRoleId() == 1) { // STUDENT role
                students.add(user);
            }
        }
        
        return students;
    }

    /**
     * T·∫°o 5 b√†i t·∫≠p c·∫ßn ch·∫•m ƒëi·ªÉm (ƒë√£ c√≥ submission nh∆∞ng ch∆∞a ch·∫•m)
     */
    private List<Assignment> createNeedGradingAssignments(Classroom classroom) {
        List<Assignment> assignments = new ArrayList<>();
        String[] titles = {
            "B√†i t·∫≠p ƒê·∫°o h√†m v√† T√≠ch ph√¢n - C·∫ßn ch·∫•m ƒëi·ªÉm",
            "Th·ª±c h√†nh Gi·∫£i ph∆∞∆°ng tr√¨nh vi ph√¢n - C·∫ßn ch·∫•m ƒëi·ªÉm", 
            "B√†i t·∫≠p Ma tr·∫≠n v√† ƒê·ªãnh th·ª©c n√¢ng cao - C·∫ßn ch·∫•m ƒëi·ªÉm",
            "·ª®ng d·ª•ng To√°n h·ªçc trong Kinh t·∫ø - C·∫ßn ch·∫•m ƒëi·ªÉm",
            "B√†i t·∫≠p t·ªïng h·ª£p Gi·∫£i t√≠ch - C·∫ßn ch·∫•m ƒëi·ªÉm"
        };

        LocalDateTime baseDueDate = LocalDateTime.now().plusDays(10); // H·∫°n n·ªôp sau 10 ng√†y

        for (int i = 0; i < 5; i++) {
            Assignment assignment = new Assignment();
            assignment.setTitle(titles[i]);
            assignment.setDescription("B√†i t·∫≠p n√†y ƒë√£ ƒë∆∞·ª£c h·ªçc sinh n·ªôp b√†i nh∆∞ng ch∆∞a ƒë∆∞·ª£c gi√°o vi√™n ch·∫•m ƒëi·ªÉm. " +
                "C·∫ßn gi√°o vi√™n xem x√©t v√† ƒë√°nh gi√°.");
            assignment.setDueDate(baseDueDate.plusDays(i)); // M·ªói b√†i c√°ch nhau 1 ng√†y
            assignment.setPoints(100);
            assignment.setClassroom(classroom);

            Assignment savedAssignment = assignmentRepository.save(assignment);
            assignments.add(savedAssignment);
            System.out.println("‚úÖ [TonClassroomDataSeeder] T·∫°o assignment c·∫ßn ch·∫•m: " + savedAssignment.getTitle() + " (ID=" + savedAssignment.getId() + ")");
        }

        return assignments;
    }

    /**
     * T·∫°o 5 b√†i t·∫≠p s·∫Øp h·∫øt h·∫°n (due_date trong 1-3 ng√†y t·ªõi)
     */
    private List<Assignment> createUpcomingAssignments(Classroom classroom) {
        List<Assignment> assignments = new ArrayList<>();
        String[] titles = {
            "B√†i ki·ªÉm tra Gi·ªõi h·∫°n v√† Li√™n t·ª•c - S·∫Øp h·∫øt h·∫°n",
            "Th·ª±c h√†nh T√≠nh t√≠ch ph√¢n b·∫±ng ph∆∞∆°ng ph√°p th·∫ø - S·∫Øp h·∫øt h·∫°n",
            "B√†i t·∫≠p Chu·ªói s·ªë v√† Chu·ªói h√†m - S·∫Øp h·∫øt h·∫°n",
            "·ª®ng d·ª•ng ƒê·∫°o h√†m trong H√¨nh h·ªçc - S·∫Øp h·∫øt h·∫°n",
            "B√†i t·∫≠p Ph∆∞∆°ng tr√¨nh tham s·ªë - S·∫Øp h·∫øt h·∫°n"
        };

        LocalDateTime now = LocalDateTime.now();

        for (int i = 0; i < 5; i++) {
            Assignment assignment = new Assignment();
            assignment.setTitle(titles[i]);
            assignment.setDescription("B√†i t·∫≠p n√†y s·∫Øp h·∫øt h·∫°n n·ªôp. H·ªçc sinh c·∫ßn ho√†n th√†nh v√† n·ªôp b√†i trong " +
                (i + 1) + " ng√†y t·ªõi ƒë·ªÉ kh√¥ng b·ªã tr·ªÖ h·∫°n.");
            assignment.setDueDate(now.plusDays(i + 1)); // H·∫øt h·∫°n trong 1-5 ng√†y t·ªõi
            assignment.setPoints(80 + (i * 5)); // ƒêi·ªÉm t·ª´ 80-100
            assignment.setClassroom(classroom);

            Assignment savedAssignment = assignmentRepository.save(assignment);
            assignments.add(savedAssignment);
            System.out.println("‚úÖ [TonClassroomDataSeeder] T·∫°o assignment s·∫Øp h·∫øt h·∫°n: " + savedAssignment.getTitle() +
                " (ID=" + savedAssignment.getId() + ", Due: " + savedAssignment.getDueDate() + ")");
        }

        return assignments;
    }

    /**
     * T·∫°o 5 b√†i t·∫≠p ƒë√£ h·∫øt h·∫°n (due_date ƒë√£ qua 1-7 ng√†y)
     */
    private List<Assignment> createOverdueAssignments(Classroom classroom) {
        List<Assignment> assignments = new ArrayList<>();
        String[] titles = {
            "B√†i t·∫≠p H√†m s·ªë m·ªôt bi·∫øn - ƒê√£ h·∫øt h·∫°n",
            "Th·ª±c h√†nh T√≠nh ƒë·∫°o h√†m c·∫•p cao - ƒê√£ h·∫øt h·∫°n",
            "B√†i ki·ªÉm tra T√≠ch ph√¢n b·ªôi - ƒê√£ h·∫øt h·∫°n",
            "·ª®ng d·ª•ng To√°n h·ªçc trong V·∫≠t l√Ω - ƒê√£ h·∫øt h·∫°n",
            "B√†i t·∫≠p t·ªïng h·ª£p ƒê·∫°i s·ªë tuy·∫øn t√≠nh - ƒê√£ h·∫øt h·∫°n"
        };

        LocalDateTime now = LocalDateTime.now();

        for (int i = 0; i < 5; i++) {
            Assignment assignment = new Assignment();
            assignment.setTitle(titles[i]);
            assignment.setDescription("B√†i t·∫≠p n√†y ƒë√£ h·∫øt h·∫°n n·ªôp t·ª´ " + (i + 1) + " ng√†y tr∆∞·ªõc. " +
                "M·ªôt s·ªë h·ªçc sinh c√≥ th·ªÉ ƒë√£ n·ªôp b√†i, m·ªôt s·ªë c√≥ th·ªÉ ch∆∞a n·ªôp.");
            assignment.setDueDate(now.minusDays(i + 1)); // ƒê√£ h·∫øt h·∫°n t·ª´ 1-5 ng√†y tr∆∞·ªõc
            assignment.setPoints(90 + (i * 2)); // ƒêi·ªÉm t·ª´ 90-98
            assignment.setClassroom(classroom);

            Assignment savedAssignment = assignmentRepository.save(assignment);
            assignments.add(savedAssignment);
            System.out.println("‚úÖ [TonClassroomDataSeeder] T·∫°o assignment ƒë√£ h·∫øt h·∫°n: " + savedAssignment.getTitle() +
                " (ID=" + savedAssignment.getId() + ", Due: " + savedAssignment.getDueDate() + ")");
        }

        return assignments;
    }

    /**
     * T·∫°o submissions cho assignments
     * @param assignments Danh s√°ch assignments
     * @param students Danh s√°ch h·ªçc sinh
     * @param classroom Classroom ƒë·ªÉ l·∫•y teacher
     * @param isGraded true n·∫øu ƒë√£ ch·∫•m ƒëi·ªÉm, false n·∫øu ch∆∞a ch·∫•m
     */
    private void createSubmissionsForAssignments(List<Assignment> assignments, List<User> students, Classroom classroom, boolean isGraded) {
        for (Assignment assignment : assignments) {
            // Ch·ªâ m·ªôt s·ªë h·ªçc sinh n·ªôp b√†i (60-80% h·ªçc sinh)
            int numSubmissions = (int) (students.size() * (0.6 + Math.random() * 0.2));

            for (int i = 0; i < numSubmissions && i < students.size(); i++) {
                User student = students.get(i);

                // Ki·ªÉm tra xem ƒë√£ c√≥ submission ch∆∞a
                if (submissionRepository.findByAssignmentAndStudent(assignment, student).isPresent()) {
                    continue;
                }

                Submission submission = new Submission();
                submission.setAssignment(assignment);
                submission.setStudent(student);
                submission.setComment("B√†i l√†m c·ªßa " + student.getFullName() + " cho assignment: " + assignment.getTitle());

                // Th·ªùi gian n·ªôp b√†i (tr∆∞·ªõc ho·∫∑c sau due date t√πy thu·ªôc v√†o lo·∫°i assignment)
                LocalDateTime submittedTime;
                if (assignment.getDueDate().isBefore(LocalDateTime.now())) {
                    // Assignment ƒë√£ h·∫øt h·∫°n - n·ªôp b√†i tr∆∞·ªõc due date
                    submittedTime = assignment.getDueDate().minusHours(1 + (int)(Math.random() * 24));
                } else {
                    // Assignment ch∆∞a h·∫øt h·∫°n - n·ªôp b√†i g·∫ßn ƒë√¢y
                    submittedTime = LocalDateTime.now().minusHours((int)(Math.random() * 48));
                }

                // Set submitted time
                submission.setSubmittedAt(submittedTime);

                if (isGraded && Math.random() > 0.3) { // 70% ƒë∆∞·ª£c ch·∫•m ƒëi·ªÉm
                    submission.setScore(70 + (int)(Math.random() * 30)); // ƒêi·ªÉm t·ª´ 70-100
                    submission.setFeedback("B√†i l√†m t·ªët. C·∫ßn c·∫£i thi·ªán m·ªôt s·ªë ƒëi·ªÉm nh·ªè.");
                    submission.setGradedAt(LocalDateTime.now().minusDays(1));

                    // Set graded by teacher (l·∫•y teacher c·ªßa classroom)
                    submission.setGradedBy(classroom.getTeacher());
                }

                Submission savedSubmission = submissionRepository.save(submission);
                System.out.println("‚úÖ [TonClassroomDataSeeder] T·∫°o submission: Assignment=" + assignment.getId() +
                    ", Student=" + student.getFullName() + ", Score=" + savedSubmission.getScore());
            }
        }
    }
}
