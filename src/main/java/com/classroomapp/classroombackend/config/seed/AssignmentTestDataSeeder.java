package com.classroomapp.classroombackend.config.seed;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.classroomapp.classroombackend.model.assignmentmanagement.Assignment;
import com.classroomapp.classroombackend.model.classroommanagement.Classroom;
import com.classroomapp.classroombackend.model.usermanagement.User;
import com.classroomapp.classroombackend.repository.assignmentmanagement.AssignmentRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomRepository;
import com.classroomapp.classroombackend.repository.usermanagement.UserRepository;

@Component
public class AssignmentTestDataSeeder {

    @Autowired
    private AssignmentRepository assignmentRepository;
    
    @Autowired
    private ClassroomRepository classroomRepository;
    
    @Autowired
    private UserRepository userRepository;

    @Transactional
    public void seedAssignmentTestData() {
        System.out.println("üìö [AssignmentTestData] T·∫°o assignments test cho classroom 54...");

        Classroom classroom54 = classroomRepository.findById(54L).orElse(null);
        if (classroom54 == null) {
            System.out.println("‚ö†Ô∏è [AssignmentTestData] Kh√¥ng t√¨m th·∫•y classroom 54");
            return;
        }

        // Find teacher by role (assuming TEACHER role is 2)
        User teacher = userRepository.findByRoleId(2).stream()
            .findFirst().orElse(null);
        if (teacher == null) {
            System.out.println("‚ö†Ô∏è [AssignmentTestData] Kh√¥ng t√¨m th·∫•y teacher");
            return;
        }

        // T·∫°o assignments test n·∫øu ch∆∞a c√≥
        List<Assignment> existingAssignments = assignmentRepository.findByClassroomId(54L);
        if (existingAssignments.size() < 3) {
            createTestAssignments(classroom54, teacher);
        }
    }

    private void createTestAssignments(Classroom classroom, User teacher) {
        List<AssignmentData> assignmentDataList = Arrays.asList(
            new AssignmentData(
                "Thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu cho h·ªá th·ªëng b√°n h√†ng",
                "Y√™u c·∫ßu thi·∫øt k·∫ø CSDL cho h·ªá th·ªëng b√°n h√†ng online bao g·ªìm:\n\n" +
                "1. Ph√¢n t√≠ch y√™u c·∫ßu nghi·ªáp v·ª•\n" +
                "2. Thi·∫øt k·∫ø m√¥ h√¨nh th·ª±c th·ªÉ - quan h·ªá (ERD)\n" +
                "3. Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·∫øn d·∫°ng chu·∫©n 3\n" +
                "4. T·∫°o script SQL t·∫°o b·∫£ng\n" +
                "5. Vi·∫øt stored procedure c∆° b·∫£n\n\n" +
                "**Deliverables:**\n" +
                "- File PDF b√°o c√°o (max 10 trang)\n" +
                "- File SQL script\n" +
                "- S∆° ƒë·ªì ERD (format .png ho·∫∑c .pdf)\n\n" +
                "**Ti√™u ch√≠ ch·∫•m ƒëi·ªÉm:**\n" +
                "- Ph√¢n t√≠ch y√™u c·∫ßu: 20%\n" +
                "- Thi·∫øt k·∫ø ERD: 30%\n" +
                "- Chu·∫©n h√≥a d·ªØ li·ªáu: 25%\n" +
                "- SQL script: 25%",
                100.0,
                LocalDateTime.now().plusDays(7)
            ),
            new AssignmentData(
                "X√¢y d·ª±ng ·ª©ng d·ª•ng web v·ªõi Spring Boot",
                "Ph√°t tri·ªÉn m·ªôt ·ª©ng d·ª•ng web ho√†n ch√¨nh s·ª≠ d·ª•ng Spring Boot:\n\n" +
                "**Y√™u c·∫ßu ch·ª©c nƒÉng:**\n" +
                "1. Authentication & Authorization\n" +
                "2. CRUD operations cho √≠t nh·∫•t 3 entities\n" +
                "3. REST API v·ªõi ƒë·∫ßy ƒë·ªß endpoints\n" +
                "4. Frontend v·ªõi Thymeleaf ho·∫∑c React\n" +
                "5. Validation v√† error handling\n" +
                "6. Unit tests (coverage ‚â• 70%)\n\n" +
                "**C√¥ng ngh·ªá y√™u c·∫ßu:**\n" +
                "- Spring Boot 3.x\n" +
                "- Spring Security\n" +
                "- JPA/Hibernate\n" +
                "- MySQL/PostgreSQL\n" +
                "- Maven/Gradle\n\n" +
                "**N·ªôp b√†i:**\n" +
                "- Source code (ZIP file)\n" +
                "- Database script\n" +
                "- Documentation\n" +
                "- Demo video (5-10 ph√∫t)",
                100.0,
                LocalDateTime.now().plusDays(14)
            ),
            new AssignmentData(
                "Ph√¢n t√≠ch v√† thi·∫øt k·∫ø h·ªá th·ªëng",
                "Th·ª±c hi·ªán ph√¢n t√≠ch v√† thi·∫øt k·∫ø h·ªá th·ªëng qu·∫£n l√Ω th∆∞ vi·ªán:\n\n" +
                "**Ph·∫ßn 1: Ph√¢n t√≠ch h·ªá th·ªëng (40%)**\n" +
                "- Ph√¢n t√≠ch stakeholder\n" +
                "- Thu th·∫≠p v√† ph√¢n t√≠ch y√™u c·∫ßu\n" +
                "- Use case diagram\n" +
                "- Activity diagram\n\n" +
                "**Ph·∫ßn 2: Thi·∫øt k·∫ø h·ªá th·ªëng (60%)**\n" +
                "- Ki·∫øn tr√∫c h·ªá th·ªëng\n" +
                "- Class diagram\n" +
                "- Sequence diagram\n" +
                "- Component diagram\n" +
                "- Deployment diagram\n\n" +
                "**C√¥ng c·ª•:**\n" +
                "- UML tools (StarUML, Lucidchart, Draw.io)\n" +
                "- Word/LaTeX cho documentation\n\n" +
                "**Format n·ªôp b√†i:**\n" +
                "- PDF report (15-20 trang)\n" +
                "- UML diagrams (separate files)\n" +
                "- Presentation slides",
                100.0,
                LocalDateTime.now().plusDays(10)
            )
        );

        for (AssignmentData data : assignmentDataList) {
            // Ki·ªÉm tra xem assignment ƒë√£ t·ªìn t·∫°i ch∆∞a
            boolean exists = assignmentRepository.findByClassroomId(classroom.getId())
                .stream()
                .anyMatch(a -> a.getTitle().equals(data.title));

            if (!exists) {
                Assignment assignment = new Assignment();
                assignment.setTitle(data.title);
                assignment.setDescription(data.description);
                assignment.setPoints(data.points.intValue());
                assignment.setDueDate(data.dueDate);
                assignment.setClassroom(classroom);

                assignmentRepository.save(assignment);
                System.out.println("‚úÖ [AssignmentTestData] T·∫°o assignment: " + data.title);
            }
        }
    }

    private static class AssignmentData {
        final String title;
        final String description;
        final Double points;
        final LocalDateTime dueDate;

        AssignmentData(String title, String description, Double points, LocalDateTime dueDate) {
            this.title = title;
            this.description = description;
            this.points = points;
            this.dueDate = dueDate;
        }
    }
}
