package com.classroomapp.classroombackend.config.seed;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.classroomapp.classroombackend.model.assignmentmanagement.Assignment;
import com.classroomapp.classroombackend.model.assignmentmanagement.Submission;
import com.classroomapp.classroombackend.model.classroommanagement.Classroom;
import com.classroomapp.classroombackend.model.classroommanagement.ClassroomEnrollment;
import com.classroomapp.classroombackend.model.classroommanagement.ClassroomEnrollmentId;
import com.classroomapp.classroombackend.model.usermanagement.User;
import com.classroomapp.classroombackend.repository.assignmentmanagement.AssignmentRepository;
import com.classroomapp.classroombackend.repository.assignmentmanagement.SubmissionRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomEnrollmentRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomRepository;
import com.classroomapp.classroombackend.repository.usermanagement.UserRepository;

@Component
public class ComprehensiveGradingSeeder {

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private ClassroomRepository classroomRepository;
    
    @Autowired
    private ClassroomEnrollmentRepository enrollmentRepository;
    
    @Autowired
    private AssignmentRepository assignmentRepository;
    
    @Autowired
    private SubmissionRepository submissionRepository;

    private final Random random = new Random();

    @Transactional
    public void seedGradingData() {
        System.out.println("üéØ [GradingSeeder] B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu ch·∫•m ƒëi·ªÉm to√†n di·ªán...");

        // L·∫•y classroom 54 (C√¥ng ngh·ªá th√¥ng tin)
        Classroom classroom54 = classroomRepository.findById(54L).orElse(null);
        if (classroom54 == null) {
            System.out.println("‚ö†Ô∏è [GradingSeeder] Kh√¥ng t√¨m th·∫•y classroom 54. ƒêang tho√°t...");
            return;
        }

        // T·∫°o sinh vi√™n m·ªõi n·∫øu c·∫ßn
        List<User> students = createStudentsIfNeeded();
        
        // ƒêƒÉng k√Ω sinh vi√™n v√†o l·ªõp 54
        enrollStudentsInClassroom(students, classroom54);
        
        // L·∫•y assignments hi·ªán t·∫°i trong classroom 54
        List<Assignment> assignments = assignmentRepository.findByClassroomId(54L);
        if (assignments.isEmpty()) {
            System.out.println("‚ö†Ô∏è [GradingSeeder] Kh√¥ng c√≥ assignments trong classroom 54");
            return;
        }

        // T·∫°o submissions v·ªõi c√°c tr·∫°ng th√°i kh√°c nhau
        for (Assignment assignment : assignments) {
            createDiverseSubmissions(assignment, students);
        }

        System.out.println("‚úÖ [GradingSeeder] Ho√†n th√†nh t·∫°o d·ªØ li·ªáu ch·∫•m ƒëi·ªÉm!");
    }

    private List<User> createStudentsIfNeeded() {
        System.out.println("üìö [GradingSeeder] T·∫°o sinh vi√™n test...");
        
        List<String> studentNames = Arrays.asList(
            "Nguy·ªÖn VƒÉn An", "Tr·∫ßn Th·ªã B√≠ch", "L√™ Minh C∆∞·ªùng", "Ph·∫°m Thu Dung",
            "Ho√†ng VƒÉn Em", "V≈© Th·ªã Ph∆∞∆°ng", "ƒê·∫∑ng Minh Giang", "B√πi Th·ªã H·∫°nh",
            "Ng√¥ VƒÉn Inh", "L√Ω Th·ªã Kim", "ƒêinh VƒÉn Long", "Tr·ªãnh Th·ªã Mai",
            "D∆∞∆°ng VƒÉn Nam", "L∆∞∆°ng Th·ªã Oanh", "T·∫° VƒÉn Ph√∫c", "Cao Th·ªã Qu·ª≥nh"
        );

        // Find existing students by role (assuming STUDENT role is 1)
        List<User> existingStudents = userRepository.findByRoleId(1);
        
        // N·∫øu ƒë√£ c√≥ ƒë·ªß sinh vi√™n th√¨ d√πng l·∫°i
        if (existingStudents.size() >= 12) {
            return existingStudents.subList(0, 12);
        }

        // T·∫°o sinh vi√™n m·ªõi
        for (int i = existingStudents.size(); i < 12; i++) {
            User student = new User();
            student.setEmail("student" + (i + 1) + "@school.edu");
            student.setUsername("student" + (i + 1));
            student.setPassword("$2a$10$defaultpassword"); // Encrypted password
            student.setFullName(studentNames.get(i % studentNames.size()));
            student.setPhoneNumber("098765" + String.format("%04d", i + 1));
            student.setRoleId(1); // Student role
            student.setDepartment("C√¥ng ngh·ªá th√¥ng tin");
            
            userRepository.save(student);
            existingStudents.add(student);
        }

        return existingStudents.subList(0, 12);
    }

    private void enrollStudentsInClassroom(List<User> students, Classroom classroom) {
        System.out.println("üìù [GradingSeeder] ƒêƒÉng k√Ω sinh vi√™n v√†o l·ªõp...");
        
        for (User student : students) {
            ClassroomEnrollmentId enrollmentId = new ClassroomEnrollmentId();
            enrollmentId.setClassroomId(classroom.getId());
            enrollmentId.setUserId(student.getId());

            // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng k√Ω ch∆∞a
            if (!enrollmentRepository.existsById(enrollmentId)) {
                ClassroomEnrollment enrollment = new ClassroomEnrollment();
                enrollment.setId(enrollmentId);
                enrollment.setClassroom(classroom);
                enrollment.setUser(student);
                
                enrollmentRepository.save(enrollment);
            }
        }
    }

    private void createDiverseSubmissions(Assignment assignment, List<User> students) {
        System.out.println("üìã [GradingSeeder] T·∫°o submissions cho assignment: " + assignment.getTitle());

        List<String> submissionContents = Arrays.asList(
            "# B√°o c√°o Thi·∫øt k·∫ø C∆° s·ªü D·ªØ li·ªáu\n\n" +
            "## 1. Ph√¢n t√≠ch y√™u c·∫ßu\n" +
            "H·ªá th·ªëng b√°n h√†ng c·∫ßn qu·∫£n l√Ω th√¥ng tin kh√°ch h√†ng, s·∫£n ph·∫©m, ƒë∆°n h√†ng...\n\n" +
            "## 2. Thi·∫øt k·∫ø ERD\n" +
            "[Diagram ƒë∆∞·ª£c ƒë√≠nh k√®m]\n\n" +
            "## 3. T·∫°o b·∫£ng SQL\n" +
            "```sql\nCREATE TABLE customers (\n  id INT PRIMARY KEY,\n  name VARCHAR(100)\n);\n```",
            
            "Thi·∫øt k·∫ø CSDL cho h·ªá th·ªëng b√°n h√†ng:\n\n" +
            "1. B·∫£ng KHACH_HANG (customer_id, ten, email, sdt)\n" +
            "2. B·∫£ng SAN_PHAM (product_id, ten_sp, gia, mo_ta)\n" +
            "3. B·∫£ng DON_HANG (order_id, customer_id, ngay_dat, tong_tien)\n" +
            "4. B·∫£ng CHI_TIET_DH (order_id, product_id, so_luong, gia)\n\n" +
            "Quan h·ªá: 1-n gi·ªØa KHACH_HANG v√† DON_HANG, n-n gi·ªØa DON_HANG v√† SAN_PHAM",
            
            "Database Design Document\n\n" +
            "Entity Analysis:\n" +
            "- Customer: Stores customer information\n" +
            "- Product: Product catalog\n" +
            "- Order: Sales transactions\n" +
            "- OrderItem: Order details\n\n" +
            "Normalization: Applied 3NF to eliminate redundancy\n" +
            "Indexes: Created on foreign keys and frequently queried columns"
        );

        // T·∫°o submission cho m·ªói sinh vi√™n v·ªõi t·ª∑ l·ªá kh√°c nhau
        for (int i = 0; i < students.size(); i++) {
            User student = students.get(i);
            
            // 80% sinh vi√™n n·ªôp b√†i
            if (random.nextDouble() < 0.8) {
                Submission submission = new Submission();
                submission.setAssignment(assignment);
                submission.setStudent(student);
                
                // N·ªôi dung submission
                String content = submissionContents.get(random.nextInt(submissionContents.size()));
                submission.setComment(content);
                
                // Th·ªùi gian n·ªôp (m·ªôt s·ªë tr·ªÖ h·∫°n)
                LocalDateTime submissionTime;
                if (random.nextDouble() < 0.15) { // 15% n·ªôp tr·ªÖ
                    submissionTime = assignment.getDueDate().plusDays(random.nextInt(7) + 1);
                } else {
                    submissionTime = assignment.getDueDate().minusHours(random.nextInt(48) + 1);
                }
                submission.setSubmittedAt(submissionTime);
                
                // M·ªôt s·ªë b√†i ƒë√£ ƒë∆∞·ª£c ch·∫•m ƒëi·ªÉm
                if (random.nextDouble() < 0.4) { // 40% ƒë√£ ch·∫•m
                    submission.setScore(60 + random.nextInt(40)); // ƒêi·ªÉm t·ª´ 60-100
                    submission.setFeedback(generateFeedback(submission.getScore()));
                    submission.setGradedAt(submissionTime.plusDays(random.nextInt(5) + 1));
                }
                
                submissionRepository.save(submission);
            }
        }
    }

    private String generateFeedback(Integer score) {
        if (score >= 90) {
            return "Xu·∫•t s·∫Øc! B√†i l√†m r·∫•t t·ªët, ERD thi·∫øt k·∫ø ch√≠nh x√°c, SQL vi·∫øt ƒë√∫ng chu·∫©n. " +
                   "Ph√¢n t√≠ch y√™u c·∫ßu chi ti·∫øt v√† logic. Ti·∫øp t·ª•c ph√°t huy!";
        } else if (score >= 80) {
            return "T·ªët! B√†i l√†m ƒë·∫°t y√™u c·∫ßu, thi·∫øt k·∫ø CSDL h·ª£p l√Ω. " +
                   "M·ªôt s·ªë ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán: chu·∫©n h√≥a d·ªØ li·ªáu v√† t·ªëi ∆∞u h√≥a query.";
        } else if (score >= 70) {
            return "Kh√°! N·∫Øm ƒë∆∞·ª£c ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ thi·∫øt k·∫ø CSDL. " +
                   "C·∫ßn ch√∫ √Ω th√™m v·ªÅ quan h·ªá gi·ªØa c√°c b·∫£ng v√† r√†ng bu·ªôc d·ªØ li·ªáu.";
        } else {
            return "C·∫ßn c·∫£i thi·ªán! B√†i l√†m ch∆∞a ƒë·∫°t y√™u c·∫ßu t·ªëi thi·ªÉu. " +
                   "H√£y xem l·∫°i t√†i li·ªáu v·ªÅ ERD v√† chu·∫©n h√≥a CSDL. Li√™n h·ªá th·∫ßy n·∫øu c·∫ßn h·ªó tr·ª£.";
        }
    }
}
