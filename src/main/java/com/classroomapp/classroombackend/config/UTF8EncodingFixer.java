package com.classroomapp.classroombackend.config;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import com.classroomapp.classroombackend.model.assignmentmanagement.Submission;
import com.classroomapp.classroombackend.repository.assignmentmanagement.SubmissionRepository;

import lombok.extern.slf4j.Slf4j;

/**
 * Component ƒë·ªÉ s·ª≠a l·ªói encoding UTF-8 cho d·ªØ li·ªáu ti·∫øng Vi·ªát
 * Ch·∫°y sau khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông ƒë·ªÉ ki·ªÉm tra v√† s·ª≠a d·ªØ li·ªáu b·ªã l·ªói encoding
 */
@Component
@Order(1000) // Ch·∫°y sau khi data loader ho√†n th√†nh
@Slf4j
public class UTF8EncodingFixer implements CommandLineRunner {

    @Autowired
    private SubmissionRepository submissionRepository;

    @Override
    public void run(String... args) throws Exception {
        log.info("üîß Starting UTF-8 encoding verification and fix...");
        
        // Set system properties for UTF-8
        System.setProperty("file.encoding", "UTF-8");
        System.setProperty("console.encoding", "UTF-8");
        System.setProperty("sun.jnu.encoding", "UTF-8");
        
        // Fix existing feedback data
        fixSubmissionFeedbackEncoding();
        
        log.info("‚úÖ UTF-8 encoding verification and fix completed.");
    }

    /**
     * S·ª≠a l·ªói encoding cho feedback trong submissions
     */
    private void fixSubmissionFeedbackEncoding() {
        log.info("üîç Checking submission feedback encoding...");
        
        List<Submission> submissions = submissionRepository.findAll();
        int fixedCount = 0;
        
        for (Submission submission : submissions) {
            if (submission.getFeedback() != null && !submission.getFeedback().isEmpty()) {
                String originalFeedback = submission.getFeedback();
                String fixedFeedback = fixUTF8Encoding(originalFeedback);
                
                if (!originalFeedback.equals(fixedFeedback)) {
                    log.info("üîß Fixing feedback encoding for submission ID: {}", submission.getId());
                    log.info("   Before: {}", originalFeedback);
                    log.info("   After:  {}", fixedFeedback);
                    
                    submission.setFeedback(fixedFeedback);
                    submissionRepository.save(submission);
                    fixedCount++;
                }
            }
        }
        
        log.info("‚úÖ Fixed {} submission feedbacks with encoding issues", fixedCount);
    }

    /**
     * S·ª≠a l·ªói encoding UTF-8 cho chu·ªói text
     * @param text Chu·ªói c·∫ßn s·ª≠a
     * @return Chu·ªói ƒë√£ s·ª≠a l·ªói encoding
     */
    private String fixUTF8Encoding(String text) {
        if (text == null || text.isEmpty()) {
            return text;
        }
        
        try {
            // Ki·ªÉm tra xem text c√≥ ch·ª©a k√Ω t·ª± l·ªói encoding kh√¥ng
            if (text.contains("?") || text.contains("ÔøΩ")) {
                // Th·ª≠ decode/encode ƒë·ªÉ s·ª≠a l·ªói
                byte[] bytes = text.getBytes(StandardCharsets.ISO_8859_1);
                String fixed = new String(bytes, StandardCharsets.UTF_8);
                
                // Ki·ªÉm tra n·∫øu k·∫øt qu·∫£ c√≥ √Ω nghƒ©a h∆°n
                if (containsVietnameseCharacters(fixed)) {
                    return fixed;
                }
            }
            
            // Ki·ªÉm tra v√† s·ª≠a URL encoding issues
            if (text.contains("%")) {
                try {
                    String decoded = URLDecoder.decode(text, StandardCharsets.UTF_8.toString());
                    if (containsVietnameseCharacters(decoded)) {
                        return decoded;
                    }
                } catch (UnsupportedEncodingException e) {
                    // Ignore and continue
                }
            }
            
            // N·∫øu kh√¥ng c√≥ v·∫•n ƒë·ªÅ, tr·∫£ v·ªÅ text g·ªëc
            return text;
            
        } catch (Exception e) {
            log.warn("Could not fix encoding for text: {}", text, e);
            return text;
        }
    }

    /**
     * Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a k√Ω t·ª± ti·∫øng Vi·ªát kh√¥ng
     */
    private boolean containsVietnameseCharacters(String text) {
        if (text == null) return false;
        
        String vietnamese = "√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë" +
                           "√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê";
        
        return text.chars().anyMatch(c -> vietnamese.indexOf(c) >= 0);
    }

    /**
     * Test encoding v·ªõi text m·∫´u
     */
    public void testEncoding() {
        String[] testTexts = {
            "L√†m r·∫•t t·ªët! B√†i l√†m chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß.",
            "Xu·∫•t s·∫Øc! Ph√¢n t√≠ch ch√≠nh x√°c.",
            "C·∫ßn c·∫£i thi·ªán th√™m v·ªÅ ph·∫ßn k·∫øt lu·∫≠n."
        };
        
        log.info("üß™ Testing UTF-8 encoding...");
        for (String text : testTexts) {
            log.info("Original: {}", text);
            log.info("Fixed:    {}", fixUTF8Encoding(text));
            log.info("---");
        }
    }
}
