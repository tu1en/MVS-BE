package com.classroomapp.classroombackend.service;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;

/**
 * Service for validating and fixing Vietnamese text encoding issues
 * 
 * This service helps detect corrupted Vietnamese characters and provides
 * methods to validate and fix encoding problems.
 */
@Slf4j
@Service
public class VietnameseTextValidationService {

    // Pattern to detect Vietnamese characters
    private static final Pattern VIETNAMESE_PATTERN = Pattern.compile(
        "[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë" +
        "√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê]"
    );

    // Pattern to detect corrupted characters (question marks)
    private static final Pattern CORRUPTION_PATTERN = Pattern.compile("\\?+");

    // Common Vietnamese words for validation
    private static final String[] COMMON_VIETNAMESE_WORDS = {
        "h·ªçc", "sinh", "gi√°o", "vi√™n", "l·ªõp", "b√†i", "t·∫≠p", "ki·ªÉm", "tra",
        "th√¥ng", "b√°o", "h·ªá", "th·ªëng", "qu·∫£n", "l√Ω", "n·ªôi", "dung",
        "th·ªùi", "gian", "ƒë·ªãa", "ƒëi·ªÉm", "k·∫øt", "qu·∫£", "ph√¢n", "t√≠ch",
        "c·∫£i", "thi·ªán", "ho√†n", "thi·ªán", "th·ª±c", "hi·ªán", "ch·∫•t", "l∆∞·ª£ng"
    };

    /**
     * Validates if text contains proper Vietnamese characters
     * 
     * @param text Text to validate
     * @return ValidationResult containing validation status and details
     */
    public ValidationResult validateVietnameseText(String text) {
        if (text == null || text.trim().isEmpty()) {
            return new ValidationResult(true, "Text is empty", null);
        }

        log.debug("üîç Validating Vietnamese text: {}", text.substring(0, Math.min(text.length(), 50)));

        ValidationResult result = new ValidationResult();
        result.setOriginalText(text);

        // Check for corruption patterns
        if (CORRUPTION_PATTERN.matcher(text).find()) {
            result.setValid(false);
            result.setIssue("Text contains corrupted characters (?)");
            result.setCorruptionDetected(true);
            
            // Count corrupted characters
            long corruptedCount = text.chars().filter(ch -> ch == '?').count();
            result.setCorruptedCharacterCount((int) corruptedCount);
            
            log.warn("‚ùå Corrupted Vietnamese text detected: {} corrupted characters", corruptedCount);
        }

        // Check encoding integrity
        byte[] utf8Bytes = text.getBytes(StandardCharsets.UTF_8);
        String reconstructed = new String(utf8Bytes, StandardCharsets.UTF_8);
        
        if (!text.equals(reconstructed)) {
            result.setValid(false);
            result.setIssue("Text encoding is corrupted");
            result.setEncodingIssue(true);
            log.warn("‚ùå Encoding issue detected in Vietnamese text");
        }

        // Check for Vietnamese character presence
        boolean hasVietnameseChars = VIETNAMESE_PATTERN.matcher(text).find();
        result.setContainsVietnameseCharacters(hasVietnameseChars);

        if (result.isValid()) {
            result.setIssue("Text is valid");
            log.debug("‚úÖ Vietnamese text validation passed");
        }

        return result;
    }

    /**
     * Attempts to fix corrupted Vietnamese text
     * 
     * @param corruptedText Text with potential corruption
     * @return Fixed text or original if no fix possible
     */
    public String fixCorruptedVietnameseText(String corruptedText) {
        if (corruptedText == null || !CORRUPTION_PATTERN.matcher(corruptedText).find()) {
            return corruptedText;
        }

        log.info("üîß Attempting to fix corrupted Vietnamese text");

        String fixedText = corruptedText;

        // Apply common Vietnamese text fixes
        fixedText = fixedText
            .replace("?ng", "·ª©ng")
            .replace("?c", "·ª©c")
            .replace("?i", "·ªõi")
            .replace("?n", "·∫ßn")
            .replace("?t", "·∫•t")
            .replace("?m", "·∫ßm")
            .replace("?p", "·∫≠p")
            .replace("?nh", "√†nh")
            .replace("?ch", "√°ch")
            .replace("?y", "·∫•y")
            .replace("?u", "·∫ßu")
            .replace("h?", "h·ªá")
            .replace("th?", "th·ªÉ")
            .replace("qu?", "qu·∫£")
            .replace("tr?", "tr∆∞·ªõc")
            .replace("gi?", "gi·ªØa")
            .replace("l?", "l·ªõp")
            .replace("h?c", "h·ªçc")
            .replace("vi?n", "vi√™n")
            .replace("thi?u", "thi·∫øu")
            // Common phrases
            .replace("L?m r?t t?t", "L√†m r·∫•t t·ªët")
            .replace("C?n c?i thi?n", "C·∫ßn c·∫£i thi·ªán")
            .replace("B?i l?m t?t", "B√†i l√†m t·ªët")
            .replace("K?t qu? t?t", "K·∫øt qu·∫£ t·ªët")
            .replace("Thi?u chi ti?t", "Thi·∫øu chi ti·∫øt")
            .replace("C?n b? sung", "C·∫ßn b·ªï sung")
            .replace("R?t t?t", "R·∫•t t·ªët")
            .replace("T?t l?m", "T·ªët l·∫Øm")
            .replace("Xu?t s?c", "Xu·∫•t s·∫Øc")
            .replace("H?y ti?p t?c", "H√£y ti·∫øp t·ª•c")
            .replace("C? g?ng h?n", "C·ªë g·∫Øng h∆°n")
            .replace("L?m t?t h?n", "L√†m t·ªët h∆°n");

        if (!fixedText.equals(corruptedText)) {
            log.info("‚úÖ Vietnamese text fix applied successfully");
            log.debug("Original: {}", corruptedText);
            log.debug("Fixed: {}", fixedText);
        } else {
            log.warn("‚ö†Ô∏è Could not fix Vietnamese text corruption");
        }

        return fixedText;
    }

    /**
     * Validates and fixes Vietnamese text in one operation
     * 
     * @param text Text to validate and fix
     * @return ProcessingResult with validation and fix results
     */
    public ProcessingResult processVietnameseText(String text) {
        ValidationResult validation = validateVietnameseText(text);
        String processedText = text;

        if (!validation.isValid() && validation.isCorruptionDetected()) {
            processedText = fixCorruptedVietnameseText(text);
            
            // Re-validate after fix
            ValidationResult postFixValidation = validateVietnameseText(processedText);
            
            return new ProcessingResult(
                validation,
                processedText,
                postFixValidation,
                !processedText.equals(text)
            );
        }

        return new ProcessingResult(validation, processedText, validation, false);
    }

    /**
     * Checks if text is likely Vietnamese based on character patterns
     * 
     * @param text Text to check
     * @return true if text appears to be Vietnamese
     */
    public boolean isVietnameseText(String text) {
        if (text == null || text.trim().isEmpty()) {
            return false;
        }

        // Check for Vietnamese characters
        if (VIETNAMESE_PATTERN.matcher(text).find()) {
            return true;
        }

        // Check for common Vietnamese words
        String lowerText = text.toLowerCase();
        for (String word : COMMON_VIETNAMESE_WORDS) {
            if (lowerText.contains(word)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Result class for Vietnamese text validation
     */
    public static class ValidationResult {
        private boolean valid = true;
        private String issue;
        private String originalText;
        private boolean corruptionDetected = false;
        private boolean encodingIssue = false;
        private boolean containsVietnameseCharacters = false;
        private int corruptedCharacterCount = 0;

        public ValidationResult() {}

        public ValidationResult(boolean valid, String issue, String originalText) {
            this.valid = valid;
            this.issue = issue;
            this.originalText = originalText;
        }

        // Getters and setters
        public boolean isValid() { return valid; }
        public void setValid(boolean valid) { this.valid = valid; }
        
        public String getIssue() { return issue; }
        public void setIssue(String issue) { this.issue = issue; }
        
        public String getOriginalText() { return originalText; }
        public void setOriginalText(String originalText) { this.originalText = originalText; }
        
        public boolean isCorruptionDetected() { return corruptionDetected; }
        public void setCorruptionDetected(boolean corruptionDetected) { this.corruptionDetected = corruptionDetected; }
        
        public boolean isEncodingIssue() { return encodingIssue; }
        public void setEncodingIssue(boolean encodingIssue) { this.encodingIssue = encodingIssue; }
        
        public boolean isContainsVietnameseCharacters() { return containsVietnameseCharacters; }
        public void setContainsVietnameseCharacters(boolean containsVietnameseCharacters) { 
            this.containsVietnameseCharacters = containsVietnameseCharacters; 
        }
        
        public int getCorruptedCharacterCount() { return corruptedCharacterCount; }
        public void setCorruptedCharacterCount(int corruptedCharacterCount) { 
            this.corruptedCharacterCount = corruptedCharacterCount; 
        }
    }

    /**
     * Result class for Vietnamese text processing
     */
    public static class ProcessingResult {
        private final ValidationResult originalValidation;
        private final String processedText;
        private final ValidationResult finalValidation;
        private final boolean wasFixed;

        public ProcessingResult(ValidationResult originalValidation, String processedText, 
                              ValidationResult finalValidation, boolean wasFixed) {
            this.originalValidation = originalValidation;
            this.processedText = processedText;
            this.finalValidation = finalValidation;
            this.wasFixed = wasFixed;
        }

        public ValidationResult getOriginalValidation() { return originalValidation; }
        public String getProcessedText() { return processedText; }
        public ValidationResult getFinalValidation() { return finalValidation; }
        public boolean wasFixed() { return wasFixed; }
    }
}
