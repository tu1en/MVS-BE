package com.classroomapp.classroombackend.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.classroomapp.classroombackend.repository.assignmentmanagement.AssignmentRepository;
import com.classroomapp.classroombackend.repository.assignmentmanagement.SubmissionRepository;
import com.classroomapp.classroombackend.repository.classroommanagement.ClassroomRepository;
import com.classroomapp.classroombackend.repository.usermanagement.UserRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class VietnameseEncodingFixService implements CommandLineRunner {

    private final ClassroomRepository classroomRepository;
    private final UserRepository userRepository;
    private final AssignmentRepository assignmentRepository;
    private final SubmissionRepository submissionRepository;

    // Mapping c·ªßa c√°c k√Ω t·ª± b·ªã l·ªói encoding th∆∞·ªùng g·∫∑p
    private static final Map<String, String> ENCODING_FIX_MAP = new HashMap<>();
    
    static {
        // C√°c k√Ω t·ª± ti·∫øng Vi·ªát th∆∞·ªùng b·ªã l·ªói
        ENCODING_FIX_MAP.put("√É¬°", "√°");
        ENCODING_FIX_MAP.put("√É ", "√†");
        ENCODING_FIX_MAP.put("√°¬∫¬£", "·∫£");
        ENCODING_FIX_MAP.put("√É¬£", "√£");
        ENCODING_FIX_MAP.put("√°¬∫¬°", "·∫°");
        ENCODING_FIX_MAP.put("√É¬¢", "√¢");
        ENCODING_FIX_MAP.put("√°¬∫¬•", "·∫•");
        ENCODING_FIX_MAP.put("√°¬∫¬ß", "·∫ß");
        ENCODING_FIX_MAP.put("√°¬∫¬©", "·∫©");
        ENCODING_FIX_MAP.put("√°¬∫¬´", "·∫´");
        ENCODING_FIX_MAP.put("√°¬∫¬≠", "·∫≠");
        ENCODING_FIX_MAP.put("√Ñ", "ƒÉ");
        ENCODING_FIX_MAP.put("√°¬∫¬Ø", "·∫Ø");
        ENCODING_FIX_MAP.put("√°¬∫¬±", "·∫±");
        ENCODING_FIX_MAP.put("√°¬∫¬≥", "·∫≥");
        ENCODING_FIX_MAP.put("√°¬∫¬°", "·∫°");
        ENCODING_FIX_MAP.put("√É¬©", "√©");
        ENCODING_FIX_MAP.put("√É¬®", "√®");
        ENCODING_FIX_MAP.put("√°¬∫¬ª", "·∫ª");
        ENCODING_FIX_MAP.put("√°¬∫¬Ω", "·∫Ω");
        ENCODING_FIX_MAP.put("√°¬∫¬π", "·∫π");
        ENCODING_FIX_MAP.put("√É¬™", "√™");
        ENCODING_FIX_MAP.put("√°¬∫¬ø", "·∫ø");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªÅ");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªÉ");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªÖ");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªá");
        ENCODING_FIX_MAP.put("√É¬≠", "√≠");
        ENCODING_FIX_MAP.put("√É¬¨", "√¨");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªâ");
        ENCODING_FIX_MAP.put("√Ñ¬©", "ƒ©");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªã");
        ENCODING_FIX_MAP.put("√É¬≥", "√≥");
        ENCODING_FIX_MAP.put("√É¬≤", "√≤");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªè");
        ENCODING_FIX_MAP.put("√É¬µ", "√µ");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªç");
        ENCODING_FIX_MAP.put("√É¬¥", "√¥");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªë");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªì");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªï");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªó");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªô");
        ENCODING_FIX_MAP.put("√Ü¬°", "∆°");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªõ");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªù");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªü");
        ENCODING_FIX_MAP.put("√°¬ª", "·ª°");
        ENCODING_FIX_MAP.put("√°¬ª¬£", "·ª£");
        ENCODING_FIX_MAP.put("√É¬∫", "√∫");
        ENCODING_FIX_MAP.put("√É¬π", "√π");
        ENCODING_FIX_MAP.put("√°¬ª¬ß", "·ªß");
        ENCODING_FIX_MAP.put("√Ö¬©", "≈©");
        ENCODING_FIX_MAP.put("√°¬ª¬•", "·ª•");
        ENCODING_FIX_MAP.put("√Ü¬∞", "∆∞");
        ENCODING_FIX_MAP.put("√°¬ª", "·ª©");
        ENCODING_FIX_MAP.put("√°¬ª", "·ª´");
        ENCODING_FIX_MAP.put("√°¬ª", "·ª≠");
        ENCODING_FIX_MAP.put("√°¬ª", "·ªØ");
        ENCODING_FIX_MAP.put("√°¬ª¬±", "·ª±");
        ENCODING_FIX_MAP.put("√É¬Ω", "√Ω");
        ENCODING_FIX_MAP.put("√°¬ª¬≥", "·ª≥");
        ENCODING_FIX_MAP.put("√°¬ª¬∑", "·ª∑");
        ENCODING_FIX_MAP.put("√°¬ª¬π", "·ªπ");
        ENCODING_FIX_MAP.put("√°¬ª¬µ", "·ªµ");
        ENCODING_FIX_MAP.put("√Ñ", "ƒë");
        
        // C√°c pattern ph·ªï bi·∫øn b·ªã l·ªói
        ENCODING_FIX_MAP.put("c?p", "c·∫•p");
        ENCODING_FIX_MAP.put("h?c", "h·ªçc");
        ENCODING_FIX_MAP.put("Vi?t", "Vi·ªát");
        ENCODING_FIX_MAP.put("ti?ng", "ti·∫øng");
        ENCODING_FIX_MAP.put("Ti?ng", "Ti·∫øng");
        ENCODING_FIX_MAP.put("ngh?", "ngh·ªá");
        ENCODING_FIX_MAP.put("co b?n", "c∆° b·∫£n");
        ENCODING_FIX_MAP.put("l?p", "l·∫≠p");
        ENCODING_FIX_MAP.put("L?p", "L·∫≠p");
        ENCODING_FIX_MAP.put("Nguy?n", "Nguy·ªÖn");
        ENCODING_FIX_MAP.put("Tr?n", "Tr·∫ßn");
        ENCODING_FIX_MAP.put("Th?", "Th·ªã");
        ENCODING_FIX_MAP.put("Ph?m", "Ph·∫°m");
        ENCODING_FIX_MAP.put("Van", "VƒÉn");
        ENCODING_FIX_MAP.put("t?p", "t·∫≠p");
        ENCODING_FIX_MAP.put("B√†i t?p", "B√†i t·∫≠p");
        ENCODING_FIX_MAP.put("v?", "v·ªÅ");
        ENCODING_FIX_MAP.put("Ma tr?n", "Ma tr·∫≠n");
        ENCODING_FIX_MAP.put("D?nh", "ƒê·ªãnh");
        ENCODING_FIX_MAP.put("th?c", "th·ª©c");
        ENCODING_FIX_MAP.put("t√°c ph?m", "t√°c ph·∫©m");
        ENCODING_FIX_MAP.put("tho", "th∆°");
        ENCODING_FIX_MAP.put("H?", "H·ªì");
        ENCODING_FIX_MAP.put("Ki?m", "Ki·ªÉm");
        ENCODING_FIX_MAP.put("gi?a", "gi·ªØa");
        ENCODING_FIX_MAP.put("k?", "k·ª≥");
        ENCODING_FIX_MAP.put("cu?i", "cu·ªëi");
        ENCODING_FIX_MAP.put("h?t", "h·∫øt");
        ENCODING_FIX_MAP.put("m√¥n", "m√¥n");
        ENCODING_FIX_MAP.put("V?n", "VƒÉn");
        ENCODING_FIX_MAP.put("th?c", "th·ª±c");
        ENCODING_FIX_MAP.put("h√†nh", "h√†nh");
    }

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        log.info("üîß B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† s·ª≠a l·ªói encoding ti·∫øng Vi·ªát...");
        
        try {
            int fixedCount = 0;
            
            // Fix classroom names
            fixedCount += fixClassroomNames();
            
            // Fix user names
            fixedCount += fixUserNames();
            
            // Fix assignment titles and descriptions
            fixedCount += fixAssignmentData();
            
            // Fix submission comments and feedback
            fixedCount += fixSubmissionData();
            
            if (fixedCount > 0) {
                log.info("‚úÖ ƒê√£ s·ª≠a {} l·ªói encoding ti·∫øng Vi·ªát", fixedCount);
            } else {
                log.info("‚úÖ Kh√¥ng t√¨m th·∫•y l·ªói encoding n√†o c·∫ßn s·ª≠a");
            }
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi s·ª≠a encoding ti·∫øng Vi·ªát: {}", e.getMessage(), e);
        }
    }

    private int fixClassroomNames() {
        int fixedCount = 0;
        var classrooms = classroomRepository.findAll();
        
        for (var classroom : classrooms) {
            if (classroom.getName() != null) {
                String originalName = classroom.getName();
                String fixedName = fixVietnameseText(originalName);
                
                if (!originalName.equals(fixedName)) {
                    classroom.setName(fixedName);
                    classroomRepository.save(classroom);
                    fixedCount++;
                    log.info("üìù S·ª≠a t√™n l·ªõp: '{}' -> '{}'", originalName, fixedName);
                }
            }
            
            if (classroom.getDescription() != null) {
                String originalDesc = classroom.getDescription();
                String fixedDesc = fixVietnameseText(originalDesc);
                
                if (!originalDesc.equals(fixedDesc)) {
                    classroom.setDescription(fixedDesc);
                    classroomRepository.save(classroom);
                    fixedCount++;
                    log.info("üìù S·ª≠a m√¥ t·∫£ l·ªõp: '{}' -> '{}'", originalDesc, fixedDesc);
                }
            }
        }
        
        return fixedCount;
    }

    private int fixUserNames() {
        int fixedCount = 0;
        var users = userRepository.findAll();
        
        for (var user : users) {
            if (user.getFullName() != null) {
                String originalName = user.getFullName();
                String fixedName = fixVietnameseText(originalName);
                
                if (!originalName.equals(fixedName)) {
                    user.setFullName(fixedName);
                    userRepository.save(user);
                    fixedCount++;
                    log.info("üë§ S·ª≠a t√™n ng∆∞·ªùi d√πng: '{}' -> '{}'", originalName, fixedName);
                }
            }
        }
        
        return fixedCount;
    }

    private int fixAssignmentData() {
        int fixedCount = 0;
        var assignments = assignmentRepository.findAll();
        
        for (var assignment : assignments) {
            if (assignment.getTitle() != null) {
                String originalTitle = assignment.getTitle();
                String fixedTitle = fixVietnameseText(originalTitle);
                
                if (!originalTitle.equals(fixedTitle)) {
                    assignment.setTitle(fixedTitle);
                    assignmentRepository.save(assignment);
                    fixedCount++;
                    log.info("üìö S·ª≠a ti√™u ƒë·ªÅ b√†i t·∫≠p: '{}' -> '{}'", originalTitle, fixedTitle);
                }
            }
            
            if (assignment.getDescription() != null) {
                String originalDesc = assignment.getDescription();
                String fixedDesc = fixVietnameseText(originalDesc);
                
                if (!originalDesc.equals(fixedDesc)) {
                    assignment.setDescription(fixedDesc);
                    assignmentRepository.save(assignment);
                    fixedCount++;
                    log.info("üìö S·ª≠a m√¥ t·∫£ b√†i t·∫≠p: '{}' -> '{}'", originalDesc, fixedDesc);
                }
            }
        }
        
        return fixedCount;
    }

    private int fixSubmissionData() {
        int fixedCount = 0;
        var submissions = submissionRepository.findAll();
        
        for (var submission : submissions) {
            if (submission.getComment() != null) {
                String originalComment = submission.getComment();
                String fixedComment = fixVietnameseText(originalComment);
                
                if (!originalComment.equals(fixedComment)) {
                    submission.setComment(fixedComment);
                    submissionRepository.save(submission);
                    fixedCount++;
                    log.info("üí¨ S·ª≠a comment b√†i n·ªôp: '{}' -> '{}'", originalComment, fixedComment);
                }
            }
            
            if (submission.getFeedback() != null) {
                String originalFeedback = submission.getFeedback();
                String fixedFeedback = fixVietnameseText(originalFeedback);
                
                if (!originalFeedback.equals(fixedFeedback)) {
                    submission.setFeedback(fixedFeedback);
                    submissionRepository.save(submission);
                    fixedCount++;
                    log.info("üìù S·ª≠a feedback b√†i n·ªôp: '{}' -> '{}'", originalFeedback, fixedFeedback);
                }
            }
        }
        
        return fixedCount;
    }

    /**
     * S·ª≠a text ti·∫øng Vi·ªát b·ªã l·ªói encoding
     * 
     * @param text Text c·∫ßn s·ª≠a
     * @return Text ƒë√£ ƒë∆∞·ª£c s·ª≠a
     */
    public String fixVietnameseText(String text) {
        if (text == null || text.isEmpty()) {
            return text;
        }
        
        String fixedText = text;
        
        // √Åp d·ª•ng c√°c fix t·ª´ mapping
        for (Map.Entry<String, String> entry : ENCODING_FIX_MAP.entrySet()) {
            fixedText = fixedText.replace(entry.getKey(), entry.getValue());
        }
        
        // S·ª≠ d·ª•ng regex ƒë·ªÉ fix c√°c pattern ph·ªï bi·∫øn
        // Fix d·∫•u h·ªèi ch·∫•m trong ti·∫øng Vi·ªát
        fixedText = fixedText.replaceAll("\\b([A-Za-z]+)\\?([a-z]+)\\b", "$1·ªè$2");
        fixedText = fixedText.replaceAll("\\b([A-Za-z]+)\\?([A-Za-z]+)\\b", "$1·ªá$2");
        
        return fixedText;
    }

    /**
     * Ki·ªÉm tra xem text c√≥ ch·ª©a k√Ω t·ª± ti·∫øng Vi·ªát b·ªã l·ªói encoding kh√¥ng
     * 
     * @param text Text c·∫ßn ki·ªÉm tra
     * @return true n·∫øu c√≥ l·ªói encoding
     */
    public boolean hasEncodingIssues(String text) {
        if (text == null || text.isEmpty()) {
            return false;
        }
        
        // Ki·ªÉm tra c√°c pattern th∆∞·ªùng g·∫∑p
        return text.contains("?") && (
            text.contains("c?p") || 
            text.contains("h?c") || 
            text.contains("Vi?t") || 
            text.contains("ngh?") || 
            text.contains("t?p") ||
            text.contains("Nguy?n") ||
            text.contains("Tr?n") ||
            text.contains("Ph?m")
        );
    }

    /**
     * Validate Vietnamese text encoding
     * 
     * @param text Text to validate
     * @return Validation result
     */
    public ValidationResult validateVietnameseEncoding(String text) {
        if (text == null || text.isEmpty()) {
            return ValidationResult.builder()
                .isValid(true)
                .message("Text is null or empty")
                .build();
        }
        
        boolean hasIssues = hasEncodingIssues(text);
        String fixedText = hasIssues ? fixVietnameseText(text) : text;
        
        return ValidationResult.builder()
            .isValid(!hasIssues)
            .originalText(text)
            .fixedText(fixedText)
            .message(hasIssues ? "Text has encoding issues" : "Text encoding is valid")
            .build();
    }

    /**
     * K·∫øt qu·∫£ validation
     */
    public static class ValidationResult {
        private boolean isValid;
        private String originalText;
        private String fixedText;
        private String message;
        
        public static ValidationResultBuilder builder() {
            return new ValidationResultBuilder();
        }
        
        // Getters
        public boolean isValid() { return isValid; }
        public String getOriginalText() { return originalText; }
        public String getFixedText() { return fixedText; }
        public String getMessage() { return message; }
        
        // Builder pattern
        public static class ValidationResultBuilder {
            private boolean isValid;
            private String originalText;
            private String fixedText;
            private String message;
            
            public ValidationResultBuilder isValid(boolean isValid) {
                this.isValid = isValid;
                return this;
            }
            
            public ValidationResultBuilder originalText(String originalText) {
                this.originalText = originalText;
                return this;
            }
            
            public ValidationResultBuilder fixedText(String fixedText) {
                this.fixedText = fixedText;
                return this;
            }
            
            public ValidationResultBuilder message(String message) {
                this.message = message;
                return this;
            }
            
            public ValidationResult build() {
                ValidationResult result = new ValidationResult();
                result.isValid = this.isValid;
                result.originalText = this.originalText;
                result.fixedText = this.fixedText;
                result.message = this.message;
                return result;
            }
        }
    }
} 